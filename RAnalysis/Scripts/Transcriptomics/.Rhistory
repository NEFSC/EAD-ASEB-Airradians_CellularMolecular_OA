legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("Upregulated Genes: GO Enrichment") +
#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_DOWN, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) + #Set the plot background #set title attributes
#geom_hline(yintercept=0.25, linetype="dashed",  color = "black", size=2) +
facet_wrap(ontology ~., scales="free_y", ncol= 1, strip.position="right", shrink = T)
Upregulated_GOEnrichment
DOWN_GO.05_filtered$Type = 'down'
UP_GO.05_filtered$Type   = 'up'
Moduel.GO.results  <- rbind(DOWN_GO.05_filtered, UP_GO.05_filtered) %>%
dplyr::filter(!ontology %in% 'CC') %>%
dplyr::select(!'under_represented_pvalue') %>%
dplyr::rename(Gene_count = numDEInCat, GO_term = term) %>%
dplyr::mutate(Gene_ratio = Gene_count/numInCat) %>%
dplyr::select(-'numInCat') %>%
dplyr::rename(GO_ID = category, pvalue = over_represented_pvalue)
Moduel.GO.results
Frontloaded_GOEnrichment <- Moduel.GO.results  %>%
dplyr::select(c('GO_term', 'ontology', 'pvalue', 'Gene_count',  'Gene_ratio')) %>%
dplyr::filter(!ontology %in% 'CC') %>%
dplyr::mutate(log10_pvalue = -log10(pvalue)) %>%
na.omit() %>%
# dplyr::mutate(GO_term = tidytext::reorder_within(log10_pvalue)) %>%
ggplot(aes(x=reorder(GO_term, log10_pvalue), y= log10_pvalue, size = Gene_count)) +
geom_segment( aes(x=reorder(GO_term, log10_pvalue),
xend=reorder(GO_term, log10_pvalue),
y=1, yend=log10_pvalue,  size = 3)) +
scale_color_manual(values=c("grey20")) +
#scale_color_gradient(low = "orange", high = "blue") +
geom_point(aes(size = Gene_count), shape =21,  fill = "white") + # shap = 15 (squares)
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("Upregulated Genes: GO Enrichment") +
#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_DOWN, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) + #Set the plot background #set title attributes
#geom_hline(yintercept=0.25, linetype="dashed",  color = "black", size=2) +
facet_wrap(ontology*Type ~., scales="free_y", ncol= 1, strip.position="right", shrink = T)
Frontloaded_GOEnrichment
Moduel.GO.results  %>%
dplyr::select(c('GO_term', 'ontology', 'pvalue', 'Gene_count',  'Gene_ratio')) %>%
dplyr::filter(!ontology %in% 'CC') %>%
dplyr::mutate(log10_pvalue = -log10(pvalue)) %>%
na.omit() %>%
# dplyr::mutate(GO_term = tidytext::reorder_within(log10_pvalue)) %>%
ggplot(aes(x=reorder(GO_term, log10_pvalue), y= log10_pvalue, size = Gene_count)) +
geom_segment( aes(x=reorder(GO_term, log10_pvalue),
xend=reorder(GO_term, log10_pvalue),
y=1, yend=log10_pvalue,  size = 3)) +
scale_color_manual(values=c("grey20")) +
#scale_color_gradient(low = "orange", high = "blue") +
geom_point(aes(size = Gene_count), shape =21,  fill = "white") + # shap = 15 (squares)
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("Upregulated Genes: GO Enrichment") +
#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_DOWN, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())
Frontloaded_GOEnrichment <- Moduel.GO.results  %>%
dplyr::select(c('GO_term', 'ontology', 'pvalue', 'Gene_count',  'Gene_ratio')) %>%
dplyr::filter(!ontology %in% 'CC') %>%
dplyr::mutate(log10_pvalue = -log10(pvalue)) %>%
na.omit() %>%
# dplyr::mutate(GO_term = tidytext::reorder_within(log10_pvalue)) %>%
ggplot(aes(x=reorder(GO_term, log10_pvalue), y= log10_pvalue, size = Gene_count)) +
geom_segment( aes(x=reorder(GO_term, log10_pvalue),
xend=reorder(GO_term, log10_pvalue),
y=1, yend=log10_pvalue,  size = 3)) +
scale_color_manual(values=c("grey20")) +
#scale_color_gradient(low = "orange", high = "blue") +
geom_point(aes(size = Gene_count), shape =21,  fill = "white") + # shap = 15 (squares)
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("Upregulated Genes: GO Enrichment") +
#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_DOWN, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) + #Set the plot background #set title attributes
#geom_hline(yintercept=0.25, linetype="dashed",  color = "black", size=2) +
facet_wrap(ontology+Type ~., scales="free_y", ncol= 1, strip.position="right", shrink = T)
Frontloaded_GOEnrichment
Moduel.GO.results
Frontloaded_GOEnrichment <- Moduel.GO.results  %>%
dplyr::select(c('GO_term', 'ontology', 'pvalue', 'Gene_count',  'Type')) %>%
dplyr::filter(!ontology %in% 'CC') %>%
dplyr::mutate(log10_pvalue = -log10(pvalue)) %>%
na.omit() %>%
# dplyr::mutate(GO_term = tidytext::reorder_within(log10_pvalue)) %>%
ggplot(aes(x=reorder(GO_term, log10_pvalue), y= log10_pvalue, size = Gene_count)) +
geom_segment( aes(x=reorder(GO_term, log10_pvalue),
xend=reorder(GO_term, log10_pvalue),
y=1, yend=log10_pvalue,  size = 3)) +
scale_color_manual(values=c("grey20")) +
#scale_color_gradient(low = "orange", high = "blue") +
geom_point(aes(size = Gene_count), shape =21,  fill = "white") + # shap = 15 (squares)
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("Upregulated Genes: GO Enrichment") +
#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_DOWN, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) + #Set the plot background #set title attributes
#geom_hline(yintercept=0.25, linetype="dashed",  color = "black", size=2) +
facet_wrap(ontology+Type ~., scales="free_y", ncol= 1, strip.position="right", shrink = T)
Frontloaded_GOEnrichment
Frontloaded_GOEnrichment <- Moduel.GO.results  %>%
dplyr::select(c('GO_term', 'ontology', 'pvalue', 'Gene_count',  'Type')) %>%
dplyr::filter(!ontology %in% 'CC') %>%
dplyr::mutate(log10_pvalue = -log10(pvalue)) %>%
na.omit() %>%
# dplyr::mutate(GO_term = tidytext::reorder_within(log10_pvalue)) %>%
ggplot(aes(x=reorder(GO_term, log10_pvalue), y= log10_pvalue, size = Gene_count)) +
geom_segment( aes(x=reorder(GO_term, log10_pvalue),
xend=reorder(GO_term, log10_pvalue),
y=1, yend=log10_pvalue,  size = 3)) +
scale_color_manual(values=c("grey20")) +
#scale_color_gradient(low = "orange", high = "blue") +
geom_point(aes(size = Gene_count), shape =21,  fill = "white") + # shap = 15 (squares)
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("Upregulated Genes: GO Enrichment") +
#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_DOWN, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) + #Set the plot background #set title attributes
#geom_hline(yintercept=0.25, linetype="dashed",  color = "black", size=2) +
facet_wrap(Type+ontology ~., scales="free_y", ncol= 1, strip.position="right", shrink = T)
Frontloaded_GOEnrichment
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
#knitr::opts_knit$set(root.dir = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
Frontloaded_UP_GOterms_genes
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
#knitr::opts_knit$set(root.dir = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
# load libraries - notes show the install command needed to install (pre installed)
library(goseq)
library(dplyr)
library(forcats)
library(ggplot2)
library(gridExtra)
library(tidyr)
library(grDevices)
library(reshape2)
library(Rmisc)
library(ggpubr)
library(tibble)
library(hrbrthemes)
library(gridExtra)
library(tidyr)
library(zoo)
library(circlize)
library(GSEABase)
library(data.table)
library(stringr)
library(tidyverse)
library(readxl)
# master reference view te master ref R script for details
Master_ref  <- read.csv(file= "Data/Transcriptomics/metadata/Seq_Cvirg_Reference.csv", sep=',', header=TRUE) %>%
dplyr::select(c('Cvirginica_TranscriptID','Annotation_GO_ID', 'Cvirginica_length'))
Cvirginica_annot_reference  <- read.csv(file="Data/Transcriptomics/metadata/seq_id_AirrCvirg_MERGED_master.csv", sep=',', header=TRUE) %>%
# dplyr::select(c('TranscriptID','Function','GeneID')) %>%
dplyr::select(c('Airradians_TranscriptID','blastxEval_CvirgProteinID',
'blastxEval_CvirgGOterms', 'meanLength')) %>%
dplyr::mutate(TranscriptID = gsub(" ", "", Airradians_TranscriptID))
# dplyr::mutate(Protein_name = gsub("\\s\\(LOC.*|\\sLOC111.*", "", perl=TRUE, Function)) %>%
# dplyr::select(!Function)
# load the frotnaoded gene set
Frontloaded_UP    <- read.csv("Output/Transcriptomics/WGCNA/challenge/Frontloading/UPmodulered_Severe.csv")
Frontloaded_DOWN  <- read.csv("Output/Transcriptomics/WGCNA/challenge/Frontloading/DOWNmoduleGreen_Moderate.csv")
# GOslim
slim              <- getOBOCollection("http://current.geneontology.org/ontology/subsets/goslim_generic.obo") #get GO database - # call goslim_generic.obo terms as 'slim'
# call the GO terms
Cvirginica_GOterms                <- as.data.frame(Cvirginica_annot_reference) %>%
dplyr::select(c('Airradians_TranscriptID','blastxEval_CvirgGOterms'))
colnames(Cvirginica_GOterms)[1:2] <- c('transcript.ID', 'GO.terms') # call gene name and the GO terms - (Uniprot ID 'V5')
splitted                          <- strsplit(as.character(Cvirginica_GOterms$GO.terms), ";") #slit into multiple GO ids by delimiter'; ' remember the space after ; is needed here! without this you will only call the first listed GO term for each gene!
GO.terms                          <- data.frame(v1 = rep.int(Cvirginica_GOterms$transcript.ID, sapply(splitted, length)),
v2 = unlist(splitted)) #list all genes with each of their GO terms in a single row
# call the GO terms
Cvirginica_GOterms_DOWN                <- as.data.frame(Frontloaded_DOWN) %>% dplyr::select(c('Airradians.TranscriptID','Annotation_GO_ID'))
colnames(Cvirginica_GOterms_DOWN)[1:2] <- c('transcript.ID', 'GO.terms') # call gene name and the GO terms - (Uniprot ID 'V5')
splitted_DOWN                          <- strsplit(as.character(Cvirginica_GOterms_DOWN$GO.terms), ";") #slit into multiple GO ids by delimiter'; ' remember the space after ; is needed here! without this you will only call the first listed GO term for each gene!
GO.terms_DOWN                          <- data.frame(v1 = rep.int(Cvirginica_GOterms_DOWN$transcript.ID,
sapply(splitted_DOWN, length)),
v2 = unlist(splitted_DOWN)) #list all genes with each of their GO terms in a single row
# Prepare dataframe(s) and vectors for goseq
# Format 'GO.term' for goseq from the P.generosa annotation .fna file 'Geoduck_annotation'
GO_unique.genes_UP  <- as.vector(unique(Frontloaded_UP$Airradians.TranscriptID)) # call all unique genes for GO analysis (goseq)
# Gene length
GO_gene.length_UP   <- unique(Frontloaded_UP %>% dplyr::select(c("Airradians.TranscriptID","Cvirginica_length")))
# merge length with counts data
length_vector_UP    <- GO_gene.length_UP$Cvirginica_length
GeneLength.UP       <-  dplyr::inner_join(Frontloaded_UP,
unique((GO_gene.length_UP %>%
dplyr::rename(TranscriptID = Airradians.TranscriptID)),
by='TranscriptID'))
# call length values for goseq - confirms that the IDvector and length_vector are the same!!!
sum(sapply(length_vector_UP,length)) == dim(Frontloaded_UP)[1] #should be TRUE
# Prepare dataframe(s) and vectors for goseq
# Format 'GO.term' for goseq from the P.generosa annotation .fna file 'Geoduck_annotation'
GO_unique.genes_DOWN  <- as.vector(unique(Frontloaded_DOWN$Airradians.TranscriptID)) # call all unique genes for GO analysis (goseq)
# Gene length
GO_gene.length_DOWN   <- unique(Frontloaded_DOWN %>% dplyr::select(c("Airradians.TranscriptID","Cvirginica_length")))
# merge length with counts data
length_vector_DOWN    <- GO_gene.length_DOWN$Cvirginica_length
GeneLength.DOWN       <-  dplyr::inner_join(Frontloaded_DOWN,
unique((GO_gene.length_DOWN %>%
dplyr::rename(TranscriptID = Airradians.TranscriptID)),
by='TranscriptID'))
# call length values for goseq - confirms that the IDvector and length_vector are the same!!!
sum(sapply(length_vector_DOWN,length)) == dim(Frontloaded_DOWN)[1] #should be TRUE
GO_unique.genes.all  <- as.vector(unique(Cvirginica_annot_reference$Airradians_TranscriptID)) # call all unique genes for GO analysis (goseq)
GO_gene.length       <- unique(Cvirginica_annot_reference %>% dplyr::select(c("Airradians_TranscriptID","meanLength")))
length_vector        <- GO_gene.length$meanLength
UP_integer <- as.integer(GO_unique.genes.all %in% (Frontloaded_UP$Airradians.TranscriptID)) # w/o day-specific ID vector
names(UP_integer)=GO_unique.genes.all # rename
UP_pwf     <- nullp(UP_integer, id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
UP_goseq   <- goseq(UP_pwf, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
UP_GO.05   <- data.frame(UP_goseq$category[UP_goseq$over_represented_pvalue<.05]) # change twice here
colnames(UP_GO.05) <- c("category")
UP_GO.05           <- merge(UP_GO.05, UP_goseq, by="category") # change here
UP_GO.05           <- UP_GO.05[order(UP_GO.05$ontology, UP_GO.05$over_represented_pvalue,-UP_GO.05$numDEInCat),] %>%
dplyr::mutate(term = as.factor(term))
UP_GO.05_filtered <- UP_GO.05 %>%
dplyr::mutate(numDEInCat = as.numeric(numDEInCat)) %>%
dplyr::filter(!(numDEInCat<2 & ontology == "BP"), !(numDEInCat<2 & ontology == "MF"))
# write csv
write.csv(UP_GO.05_filtered,
file = paste("Output/Transcriptomics/WGCNA/challenge/Frontloading/UP_GOEnrichment.csv", sep ='')) # save csv
DOWN_integer <- as.integer(GO_unique.genes.all %in% (Frontloaded_DOWN$Airradians.TranscriptID)) # w/o day-specific ID vector
names(DOWN_integer)=GO_unique.genes.all # rename
DOWN_pwf     <- nullp(DOWN_integer, id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
DOWN_goseq   <- goseq(DOWN_pwf, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
DOWN_GO.05   <- data.frame(DOWN_goseq$category[DOWN_goseq$over_represented_pvalue<.05]) # change twice here
colnames(DOWN_GO.05) <- c("category")
DOWN_GO.05           <- merge(DOWN_GO.05, DOWN_goseq, by="category") # change here
DOWN_GO.05           <- DOWN_GO.05[order(DOWN_GO.05$ontology, DOWN_GO.05$over_represented_pvalue,-DOWN_GO.05$numDEInCat),] %>%
dplyr::mutate(term = as.factor(term))
DOWN_GO.05_filtered <- DOWN_GO.05 %>%
dplyr::mutate(numDEInCat = as.numeric(numDEInCat)) %>%
dplyr::filter(!(numDEInCat<2 & ontology == "BP"), !(numDEInCat<2 & ontology == "MF"))
# write csv
write.csv(DOWN_GO.05_filtered,
file = paste("Output/Transcriptomics/WGCNA/challenge/Frontloading/DOWN_GOEnrichment.csv", sep ='')) # save csv
# Prepare dataframe(s) and vectors for goseq
# Format 'GO.term' for goseq from the P.generosa annotation .fna file 'Geoduck_annotation'
GO_unique.genes_DOWN  <- as.vector(unique(Frontloaded_DOWN$Airradians.TranscriptID)) # call all unique genes for GO analysis (goseq)
# Gene length
GO_gene.length_DOWN   <- unique(Frontloaded_DOWN %>% dplyr::select(c("Airradians.TranscriptID","Cvirginica_length")))
# merge length with counts data
length_vector_DOWN    <- GO_gene.length_DOWN$Cvirginica_length
GeneLength.DOWN       <-  dplyr::inner_join(Frontloaded_DOWN,
unique((GO_gene.length_DOWN %>%
dplyr::rename(TranscriptID = Airradians.TranscriptID)),
by='TranscriptID'))
# call length values for goseq - confirms that the IDvector and length_vector are the same!!!
sum(sapply(length_vector_DOWN,length)) == dim(Frontloaded_DOWN)[1] #should be TRUE
GO_unique.genes.all  <- as.vector(unique(Cvirginica_annot_reference$Airradians_TranscriptID)) # call all unique genes for GO analysis (goseq)
GO_gene.length       <- unique(Cvirginica_annot_reference %>% dplyr::select(c("Airradians_TranscriptID","meanLength")))
length_vector        <- GO_gene.length$meanLength
UP_integer <- as.integer(GO_unique.genes.all %in% (Frontloaded_UP$Airradians.TranscriptID)) # w/o day-specific ID vector
names(UP_integer)=GO_unique.genes.all # rename
UP_pwf     <- nullp(UP_integer, id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
UP_goseq   <- goseq(UP_pwf, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
UP_GO.05   <- data.frame(UP_goseq$category[UP_goseq$over_represented_pvalue<.05]) # change twice here
colnames(UP_GO.05) <- c("category")
UP_GO.05           <- merge(UP_GO.05, UP_goseq, by="category") # change here
UP_GO.05           <- UP_GO.05[order(UP_GO.05$ontology, UP_GO.05$over_represented_pvalue,-UP_GO.05$numDEInCat),] %>%
dplyr::mutate(term = as.factor(term))
UP_GO.05_filtered <- UP_GO.05 %>%
dplyr::mutate(numDEInCat = as.numeric(numDEInCat)) %>%
dplyr::filter(!(numDEInCat<2 & ontology == "BP"), !(numDEInCat<2 & ontology == "MF"))
# write csv
write.csv(UP_GO.05_filtered,
file = paste("Output/Transcriptomics/WGCNA/challenge/Frontloading/UP_GOEnrichment.csv", sep ='')) # save csv
Moduel.GO.results  <- UP_GO.05_filtered %>%
dplyr::filter(!ontology %in% 'CC') %>%
dplyr::select(!'under_represented_pvalue') %>%
dplyr::rename(Gene_count = numDEInCat, GO_term = term) %>%
dplyr::mutate(Gene_ratio = Gene_count/numInCat) %>%
dplyr::select(-'numInCat') %>%
dplyr::rename(GO_ID = category, pvalue = over_represented_pvalue)
Upregulated_GOEnrichment <- Moduel.GO.results  %>%
dplyr::select(c('GO_term', 'ontology', 'pvalue', 'Gene_count',  'Gene_ratio')) %>%
dplyr::filter(!ontology %in% 'CC') %>%
dplyr::filter(!GO_term %in% 'biosynthetic process') %>%
dplyr::mutate(log10_pvalue = -log10(pvalue)) %>%
na.omit() %>%
# dplyr::mutate(GO_term = tidytext::reorder_within(log10_pvalue)) %>%
ggplot(aes(x=reorder(GO_term, log10_pvalue), y= log10_pvalue, size = Gene_count)) +
geom_segment( aes(x=reorder(GO_term, log10_pvalue),
xend=reorder(GO_term, log10_pvalue),
y=1, yend=log10_pvalue,  size = 3)) +
scale_color_manual(values=c("grey20")) +
#scale_color_gradient(low = "orange", high = "blue") +
geom_point(aes(size = Gene_count), shape =21,  fill = "white") + # shap = 15 (squares)
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("Upregulated Genes: GO Enrichment") +
#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_DOWN, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) + #Set the plot background #set title attributes
#geom_hline(yintercept=0.25, linetype="dashed",  color = "black", size=2) +
facet_wrap(ontology ~., scales="free_y", ncol= 1, strip.position="right", shrink = T)
Upregulated_GOEnrichment
DOWN_GO.05_filtered$Type = 'down'
UP_GO.05_filtered$Type   = 'up'
Moduel.GO.results  <- rbind(DOWN_GO.05_filtered, UP_GO.05_filtered) %>%
dplyr::filter(!ontology %in% 'CC') %>%
dplyr::select(!'under_represented_pvalue') %>%
dplyr::rename(Gene_count = numDEInCat, GO_term = term) %>%
dplyr::mutate(Gene_ratio = Gene_count/numInCat) %>%
dplyr::select(-'numInCat') %>%
dplyr::rename(GO_ID = category, pvalue = over_represented_pvalue)
Frontloaded_GOEnrichment <- Moduel.GO.results  %>%
dplyr::select(c('GO_term', 'ontology', 'pvalue', 'Gene_count',  'Type')) %>%
dplyr::filter(!ontology %in% 'CC') %>%
dplyr::filter(!GO_term %in% 'biosynthetic process') %>%
dplyr::mutate(log10_pvalue = -log10(pvalue)) %>%
na.omit() %>%
# dplyr::mutate(GO_term = tidytext::reorder_within(log10_pvalue)) %>%
ggplot(aes(x=reorder(GO_term, log10_pvalue), y= log10_pvalue, size = Gene_count)) +
geom_segment( aes(x=reorder(GO_term, log10_pvalue),
xend=reorder(GO_term, log10_pvalue),
y=1, yend=log10_pvalue,  size = 3)) +
scale_color_manual(values=c("grey20")) +
#scale_color_gradient(low = "orange", high = "blue") +
geom_point(aes(size = Gene_count), shape =21,  fill = "white") + # shap = 15 (squares)
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("Frontloaded Genes: GO Enrichment") +
#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_DOWN, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) + #Set the plot background #set title attributes
#geom_hline(yintercept=0.25, linetype="dashed",  color = "black", size=2) +
facet_wrap(Type+ontology ~., scales="free_y", ncol= 1, strip.position="right", shrink = T)
# write csv
pdf("Output/Transcriptomics/WGCNA/challenge/Frontloading/Frontloading_GOEnrichment.pdf", width = 6, height = 8) # save csv
Frontloaded_GOEnrichment
dev.off()
Frontloaded_GOEnrichment
# rename cateroy to GO terms in the enriched terms file
# note: we now want the genes associated with each enriched term!
UP_GO.05_filtered <- UP_GO.05_filtered %>% dplyr::rename(GO_terms = category)
Frontloaded_UP
MFslim_GOterm_summary    <- UP_GO.05_filtered
# using string split to call all GO IDs in the frontloaded gene set
s <- strsplit(Frontloaded_UP$Annotation_GO_ID, split = ";")
# make a datafrmaae of all unlisted GO terms n the frontloaded gene set
Frontloaded_UP_ALL_GOterms_unlisted  <- data.frame(Protein_Name =
rep(Frontloaded_UP$Protein_name, sapply(s, length)),
GO_terms = unlist(s))
# now we can merge these files - the upregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Frontloaded_UP_GOterms_genes <- merge(UP_GO.05_filtered, Frontloaded_UP_ALL_GOterms_unlisted, by = 'GO_terms')
Frontloaded_UP_GOterms_genes
# rename cateroy to GO terms in the enriched terms file
# note: we now want the genes associated with each enriched term!
DOWN_GO.05_filtered <- DOWN_GO.05_filtered %>% dplyr::rename(GO_terms = category)
# rename cateroy to GO terms in the enriched terms file
# note: we now want the genes associated with each enriched term!
DOWN_GO.05_filtered <- DOWN_GO.05_filtered %>% dplyr::rename(GO_terms = category)
# using string split to call all GO IDs in the frontloaded gene set
s <- strsplit(Frontloaded_DOWN$Annotation_GO_ID, split = ";")
# make a datafrmaae of all unlisted GO terms n the frontloaded gene set
Frontloaded_DOWN_ALL_GOterms_unlisted  <- data.frame(Protein_Name =
rep(Frontloaded_DOWN$Protein_name, sapply(s, length)),
GO_terms = unlist(s))
Frontloaded_DOWN_ALL_GOterms_unlisted
# now we can merge these files - the DOWNregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Frontloaded_DOWN_GOterms_genes <- merge(DOWN_GO.05_filtered, Frontloaded_DOWN_ALL_GOterms_unlisted, by = 'GO_terms')
Frontloaded_DOWN_GOterms_genes
View(Frontloaded_DOWN)
View(Frontloaded_DOWN_GOterms_genes)
View(Frontloaded_UP_GOterms_genes)
View(Frontloaded_UP)
View(Frontloaded_UP_GOterms_genes)
View(Frontloaded_DOWN_GOterms_genes)
View(Frontloaded_UP)
unique(Frontloaded_UP_GOterms_genes$GO_terms)
unique(Frontloaded_UP_GOterms_genes$term)
Frontloaded_UP_GOterms_genes
unique(Frontloaded_UP_GOterms_genes %>% filter(!ontology %in% 'CC')$term)
unique( (Frontloaded_UP_GOterms_genes %>% filter(!ontology %in% 'CC'))$term)
unique( (Frontloaded_DOWN_GOterms_genes %>% filter(!ontology %in% 'CC'))$term)
Frontloaded_DOWN_GOterms_genes
get_wd()
getwd()
Frontloaded_UP_GOterms_genes
write.csv(Frontloaded_UP_GOterms_genes,"Output/Transcriptomics/WGCNA/challenge/Frontloading/UP_GOEnrichment_all_genes.csv") # save csv
# write cv file
write.csv(Frontloaded_DOWN_GOterms_genes,"Output/Transcriptomics/WGCNA/challenge/Frontloading/DOWN_GOEnrichment_all_genes.csv") # save csv
Frontloaded_UP_GOterms_genes
# now we can merge these files - the upregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Frontloaded_UP_GOterms_genes <- merge(UP_GO.05_filtered, Frontloaded_UP_ALL_GOterms_unlisted, by = 'GO_terms')  %>%
dplyr::sort(ontology,term)
# now we can merge these files - the upregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Frontloaded_UP_GOterms_genes <- merge(UP_GO.05_filtered, Frontloaded_UP_ALL_GOterms_unlisted, by = 'GO_terms')  %>%
sort(ontology,term)
# now we can merge these files - the upregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Frontloaded_UP_GOterms_genes <- merge(UP_GO.05_filtered, Frontloaded_UP_ALL_GOterms_unlisted, by = 'GO_terms')  %>%
sort(ontology)
Frontloaded_UP_GOterms_genes <- merge(UP_GO.05_filtered, Frontloaded_UP_ALL_GOterms_unlisted, by = 'GO_terms')
Frontloaded_UP_GOterms_genes
# now we can merge these files - the upregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Frontloaded_UP_GOterms_genes <- merge(UP_GO.05_filtered, Frontloaded_UP_ALL_GOterms_unlisted, by = 'GO_terms')  %>%
order(ontology)
Frontloaded_UP_GOterms_genes_2 <- Frontloaded_UP_GOterms_genes[order(ontology),]
# now we can merge these files - the upregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Frontloaded_UP_GOterms_genes <- merge(UP_GO.05_filtered, Frontloaded_UP_ALL_GOterms_unlisted, by = 'GO_terms')
Frontloaded_UP_GOterms_genes
Frontloaded_UP_GOterms_genes_2 <- Frontloaded_UP_GOterms_genes[order(numDEInCat),]
Frontloaded_UP_GOterms_genes
# now we can merge these files - the upregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Frontloaded_UP_GOterms_genes <- merge(UP_GO.05_filtered, Frontloaded_UP_ALL_GOterms_unlisted, by = 'GO_terms') %>% dplyr::filter(!ontology %in% 'CC')
Frontloaded_UP_GOterms_genes
# write cv file
write.csv(Frontloaded_UP_GOterms_genes,"Output/Transcriptomics/WGCNA/challenge/Frontloading/UP_GOEnrichment_all_genes.csv") # save csv
# write cv file
write.csv(Frontloaded_UP_GOterms_genes,"Output/Transcriptomics/WGCNA/challenge/Frontloading/UP_GOEnrichment_all_genes.csv") # save csv
# now we can merge these files - the DOWNregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Frontloaded_DOWN_GOterms_genes <- merge(DOWN_GO.05_filtered, Frontloaded_DOWN_ALL_GOterms_unlisted, by = 'GO_terms') %>% dplyr::filter(!ontology %in% 'CC')
# rename cateroy to GO terms in the enriched terms file
# note: we now want the genes associated with each enriched term!
DOWN_GO.05_filtered <- DOWN_GO.05_filtered %>% dplyr::rename(GO_terms = category)
# now we can merge these files - the DOWNregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Frontloaded_DOWN_GOterms_genes <- merge(DOWN_GO.05_filtered, Frontloaded_DOWN_ALL_GOterms_unlisted, by = 'GO_terms') %>% dplyr::filter(!ontology %in% 'CC')
# write cv file
write.csv(Frontloaded_DOWN_GOterms_genes,"Output/Transcriptomics/WGCNA/challenge/Frontloading/DOWN_GOEnrichment_all_genes.csv") # save csv
