print(pCO2history.rlog.Mod)
dev.off()
}
annot
# (1) Response to challenge
names(lowlow_geneTraitSignificance)
names(lowlow_GSPvalue)
geneInfo_GROUPS_1 = data.frame(Airradians.TranscriptID = annot$Airradians_TranscriptID[probes2annot],
Cvirginica.TranscriptID = annot$blastxEval_CvirgTranscriptID[probes2annot],
moduleColor      = moduleColors_1,
# KEGG_ID          = annot$Cgigas_KEGGID[probes2annot],
Protein_name     = annot$blastxEval_CvirgGeneID[probes2annot],
gene_length      = annot$meanLength[probes2annot],
GO.terms         = annot$blastxEval_CvirgGOterms[probes2annot],
lowlow_geneTraitSignificance, lowlow_GSPvalue)
modOrder_1 = order(-abs(cor(MEs_1, lowlow, use = "p"))); # order by the strength of the correlation between module and trait
for(mod in 1:ncol(geneModuleMembership_1)) { # Add module membership information in the chosen order
oldNames = names(geneInfo_GROUPS_1)
geneInfo_GROUPS_1 = data.frame(geneInfo_GROUPS_1, geneModuleMembership_1[, modOrder_1[mod]],
MMPvalue_1[, modOrder_1[mod]]);
names(geneInfo_GROUPS_1) = c(oldNames, paste("MM.", modNames_1[modOrder_1[mod]], sep=""),
paste("p.MM.", modNames_1[modOrder_1[mod]], sep=""))
}
geneOrder_1       = order(geneInfo_GROUPS_1$moduleColor, -abs(geneInfo_GROUPS_1$GS.lowlow)); # Order  by geneTraitSignificance
geneInfo_GROUPS_1 = geneInfo_GROUPS_1[geneOrder_1, ]
nrow(geneInfo_GROUPS_1 %>% dplyr::filter(moduleColor == 'red')) ==
length(colnames(dds_1filt_master)[moduleColors_1=="red"]) # must be TRUE!
geneInfo_GROUPS_1_tidy <- geneInfo_GROUPS_1 %>%
dplyr::select(!Airradians.TranscriptID) %>%
tibble::rownames_to_column("Airradians.TranscriptID")
write.csv(geneInfo_GROUPS_1_tidy, file = "Output/Transcriptomics/WGCNA/challenge/Challenge_WGCNA_ModulMembership.csv")
# (2) Cohort differences under *match*
names(low_geneTraitSignificance)
names(low_GSPvalue)
geneInfo_GROUPS_2 = data.frame(Airradians.TranscriptID = annot$Airradians_TranscriptID[probes2annot],
Cvirginica.TranscriptID = annot$blastxEval_CvirgTranscriptID[probes2annot],
moduleColor      = moduleColors_2,
# KEGG_ID          = annot$Cgigas_KEGGID[probes2annot],
Protein_name     = annot$blastxEval_CvirgGeneID[probes2annot],
gene_length      = annot$meanLength[probes2annot],
GO.terms         = annot$blastxEval_CvirgGOterms[probes2annot],
low_geneTraitSignificance, low_GSPvalue)
modOrder_2 = order(-abs(cor(MEs_2, low, use = "p"))); # order by the strength of the correlation between module and trait
for(mod in 1:ncol(geneModuleMembership_2)) { # Add module membership information in the chosen order
oldNames = names(geneInfo_GROUPS_2)
geneInfo_GROUPS_2 = data.frame(geneInfo_GROUPS_2, geneModuleMembership_2[, modOrder_2[mod]],
MMPvalue_2[, modOrder_2[mod]]);
names(geneInfo_GROUPS_2) = c(oldNames, paste("MM.", modNames_2[modOrder_2[mod]], sep=""),
paste("p.MM.", modNames_2[modOrder_2[mod]], sep=""))
}
geneOrder_2       = order(geneInfo_GROUPS_2$moduleColor, -abs(geneInfo_GROUPS_2$GS.low)); # Order  by geneTraitSignificance
geneInfo_GROUPS_2 = geneInfo_GROUPS_2[geneOrder_2, ]
nrow(geneInfo_GROUPS_2 %>% dplyr::filter(moduleColor == 'red')) ==
length(colnames(dds_2filt_master)[moduleColors_2=="red"]) # must be TRUE!
geneInfo_GROUPS_2_tidy <- geneInfo_GROUPS_2 %>%
dplyr::select(!Airradians.TranscriptID) %>%
tibble::rownames_to_column("Airradians.TranscriptID")
write.csv(geneInfo_GROUPS_2_tidy, file = "Output/Transcriptomics/WGCNA/cohorts/Cohorts_WGCNA_ModulMembership.csv")
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
library(dplyr)
library(reshape2)
library(ggplot2)
library(kableExtra)
library(knitr)
library(tidyverse)
library(DESeq2)
library(plotrix)
library(ggpubr)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
# load data and read in the module membership master file
load(file = "Output/Transcriptomics/WGCNA/challenge/Challenge-networkConstruction-stepByStep.RData")
Challenge_ModuleMembership  <- read.csv(file="Output/Transcriptomics/WGCNA/challenge/Challenge_WGCNA_ModulMembership.csv",
sep=',', header=TRUE) %>% select(!X)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
# write out this rlog tranformed master data (used for plotting below1)
rlogExp_Challenge <- read.csv(file = "Output/Transcriptomics/WGCNA/challenge/Challenge_rlog_transformed.csv", sep=',', header=TRUE)
rlogExp_Challenge
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
rlogExp_Challenge.long              <- rlogExp_Challenge %>%
pivot_longer(
cols = !c(Airradians_TranscriptID),
names_to = "Sample_num",
values_to = "rlogExp"
)
rlogExp_Challenge
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
# write out this rlog tranformed master data (used for plotting below1)
rlogExp_Challenge <- read.csv(file = "Output/Transcriptomics/WGCNA/challenge/Challenge_rlog_transformed.csv", sep=',', header=TRUE) %>%
dplyr::select(!X)
rlogExp_Challenge.long              <- rlogExp_Challenge %>%
pivot_longer(
cols = !c(Airradians_TranscriptID),
names_to = "Sample_num",
values_to = "rlogExp"
)
rlogExp_Challenge
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
rlogExp_Challenge.long              <- rlogExp_Challenge %>%
rlogExp_Challenge.long              <- rlogExp_Challenge %>%
pivot_longer(
cols = !c(Airradians.TranscriptID),
names_to = "Sample_num",
values_to = "rlogExp"
)
rlogExp_Challenge.long              <- rlogExp_Challenge %>%
pivot_longer(
cols = !c(Airradians.TranscriptID),
names_to = "Sample_num",
values_to = "rlogExp"
)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
rlogExp_Challenge.long.meta         <- cbind(rlogExp_Challenge.long, exp_metadata_1_master, by = "Sample_num")
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
rlogExp_LowvHigh.long.meta.means   <- rlogExp_Challenge.long.meta %>%
dplyr::select(c(rlogExp, pCO2_exposure, pCO2_history, Airradians.TranscriptID)) %>%
dplyr::group_by(pCO2_exposure, pCO2_history, Airradians.TranscriptID) %>%
dplyr::summarise(mean.rlogExp = mean(rlogExp), n = n())
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
rlogExp_Challenge.long.meta.means   <- rlogExp_Challenge.long.meta %>%
dplyr::select(c(rlogExp, pCO2_exposure, pCO2_history, Airradians.TranscriptID)) %>%
dplyr::group_by(pCO2_exposure, pCO2_history, Airradians.TranscriptID) %>%
dplyr::summarise(mean.rlogExp = mean(rlogExp), n = n())
rlogExp_Challenge.long.meta.means
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
loop_df    <- as.data.frame(unique(rlogExp_Challenge.long.meta.means$Airradians.TranscriptID))
loop.table <- data.frame(matrix(nrow = 1, ncol = 8)) # create dataframe to save cumunalitively during for loop
colnames(loop.table)<-c('Airradians_TranscriptID',
'baseMeanNAIVE_control',
'baseMeanHABITUATED_control',
'baseMeanNAIVE_response',
'baseMeanHABITUATED_response',
'ControlRatio',
'ResponseRatioHigh',
'Frontloaded_criteria')
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
moduleRed_Airradians.IDs            <- Challenge_ModuleMembership %>% dplyr::filter(moduleColor %in% 'red')
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
moduleRed_Airradians.IDs            <- (Challenge_ModuleMembership %>% dplyr::filter(moduleColor %in% 'red'))$Airradians.TranscriptID
moduleRed_Airradians.IDs
rlogExp_Challenge
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
rlogExp_Challenge.long              <- rlogExp_Challenge %>%
dplyr::filter(Airradians.TranscriptID %in% moduleRed_Airradians.IDs) %>%
pivot_longer(
cols = !c(Airradians.TranscriptID),
names_to = "Sample_num",
values_to = "rlogExp"
)
rlogExp_Challenge.long.meta         <- cbind(rlogExp_Challenge.long, exp_metadata_1_master, by = "Sample_num")
rlogExp_Challenge.long.meta.means   <- rlogExp_Challenge.long.meta %>%
dplyr::select(c(rlogExp, pCO2_exposure, pCO2_history, Airradians.TranscriptID)) %>%
dplyr::group_by(pCO2_exposure, pCO2_history, Airradians.TranscriptID) %>%
dplyr::summarise(mean.rlogExp = mean(rlogExp), n = n())
rlogExp_Challenge.long.meta.means
loop_df    <- as.data.frame(unique(rlogExp_Challenge.long.meta.means$Airradians.TranscriptID))
loop.table <- data.frame(matrix(nrow = 1, ncol = 8)) # create dataframe to save cumunalitively during for loop
colnames(loop.table)<-c('Airradians_TranscriptID',
'baseMeanNAIVE_control',
'baseMeanHABITUATED_control',
'baseMeanNAIVE_response',
'baseMeanHABITUATED_response',
'ControlRatio',
'ResponseRatioHigh',
'Frontloaded_criteria')
df_total <- data.frame() # start dataframe
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
for (i in 1:nrow(loop_df)) {
df_loop <- rlogExp_Challenge.long.meta.means %>% filter(Airradians.TranscriptID %in% loop_df[i,])
if (nrow(df_loop) == 6) {
loop.table$Airradians_TranscriptID     <- loop_df[i,]
loop.table$baseMeanNAIVE_control       <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'low' & pCO2_history %in% 'low'))$mean.rlogExp
loop.table$baseMeanHABITUATED_control  <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'low' & pCO2_history %in% 'severe'))$mean.rlogExp
loop.table$baseMeanNAIVE_response      <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'severe' & pCO2_history %in% 'low'))$mean.rlogExp
loop.table$baseMeanHABITUATED_response <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'severe' & pCO2_history %in% 'severe'))$mean.rlogExp
loop.table$ControlRatio                <- loop.table$baseMeanHABITUATED_control / loop.table$baseMeanNAIVE_control
loop.table$ResponseRatioHigh           <- ( loop.table$baseMeanHABITUATED_response / loop.table$baseMeanHABITUATED_control ) /
( loop.table$baseMeanNAIVE_response / loop.table$baseMeanNAIVE_control)
loop.table <- loop.table %>%
dplyr::mutate(Frontloaded_criteria = case_when(ControlRatio > 1.00 & ResponseRatioHigh < 1.00 ~ "frontloaded",
ControlRatio < 1.00 & ResponseRatioHigh < 1.00 ~ "low expression relative to naive",
ControlRatio < 1.00 & ResponseRatioHigh > 1.00 ~ "more responsive relative to naive"))
} else {NA}
df <- data.frame(loop.table) # name dataframe for this singl e row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
}
View(df_total)
df_total %>%
dplyr::mutate(FrontMod_color =
ifelse(ResponseRatioHigh < 1.0 &
ControlRatio > 1.0, "True", "False")) %>%
# dplyr::filter(ControlRatio < 5) %>%
dplyr::filter(ResponseRatioHigh <1.2) %>%
ggplot(aes(x=ResponseRatioHigh, y=ControlRatio)) +
geom_point(aes(color='grey80', na.rm=TRUE)) +
scale_shape_manual(values=c(19,19)) +
scale_color_manual(values=c("grey", "black")) +
theme_classic() +
scale_x_continuous(expand = c(0, 0), breaks=seq(0,2, 0.2)) +
scale_y_continuous(expand = c(0, 0), limits = c(0.9,1.4)) +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Low pCO2 exposure ratio",
x = "Response ratio to high pCO2",
title = "Frontloaded genes; response to High pCO2") +
expand_limits(x = 1.2, y = 1.4) +
annotate("rect", xmin = 0.8, xmax = 1, ymin = 1, ymax = 1.4,
alpha = .2) +
theme(legend.position="none", text = element_text(size=10))
Frontloaded_AirradiansTranscriptIDs <- df_total %>% filter(Frontloaded_criteria %in% 'frontloaded')
IDtargets <- rlogExp_LowvHigh.long.meta.means %>% dplyr::filter(Airradians_TranscriptID %in% Frontloaded_AirradiansTranscriptIDs$Airradians_TranscriptID)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
IDtargets <- rlogExp_LowvHigh.long.meta.means %>% dplyr::filter(Airradians.TranscriptID %in% Frontloaded_AirradiansTranscriptIDs$Airradians_TranscriptID)
plotting <- IDtargets %>% group_by(pCO2_history, pCO2_exposure) %>%
summarise(mean_meanrlogExp = mean(mean.rlogExp),
sd_rlogExp = sd(mean.rlogExp),
n = n(),
se_rlogExp = sd_rlogExp / sqrt(n)
)
IDtargets_stats <- IDtargets %>% dplyr::filter(pCO2_exposure %in% c('low', 'severe'))
mod <- lm(mean.rlogExp~pCO2_history*pCO2_exposure,data=IDtargets_stats)
shapiro.test(resid(mod)) # p-value < 2.2e-16
summary(aov(mod))
plot <- plotting %>% dplyr::filter(pCO2_exposure %in% c('low', 'severe')) %>%
ggplot(aes(x=pCO2_exposure, y = mean_meanrlogExp, fill=pCO2_history)) +
geom_point(aes(shape=pCO2_history, fill=pCO2_history), size = 4.5,position=position_dodge(.4)) +
geom_line() +
geom_errorbar(aes(ymin=(mean_meanrlogExp)-(se_rlogExp), # new means and se by treatment
ymax=(mean_meanrlogExp)+(se_rlogExp)), # new means and se by treatment
width=0,position=position_dodge(.4)) # width determines the length of the end ticks
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
plot
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
IDtargets <- rlogExp_LowvHigh.long.meta.means %>% dplyr::filter(Airradians.TranscriptID %in%
Frontloaded_AirradiansTranscriptIDs$Airradians_TranscriptID)
IDtargets
plotting <- IDtargets %>% group_by(pCO2_history, pCO2_exposure) %>%
summarise(mean_meanrlogExp = mean(mean.rlogExp),
sd_rlogExp = sd(mean.rlogExp),
n = n(),
se_rlogExp = sd_rlogExp / sqrt(n)
)
plotting
IDtargets
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
unique(IDtargets$Airradians.TranscriptID)
IDtargets_stats <- IDtargets %>% dplyr::filter(pCO2_exposure %in% c('low', 'severe'))
mod <- lm(mean.rlogExp~pCO2_history*pCO2_exposure,data=IDtargets_stats)
shapiro.test(resid(mod)) # p-value < 2.2e-16
summary(aov(mod))
plot <- plotting %>% dplyr::filter(pCO2_exposure %in% c('low', 'severe')) %>%
ggplot(aes(x=pCO2_exposure, y = mean_meanrlogExp, fill=pCO2_history)) +
geom_point(aes(shape=pCO2_history, fill=pCO2_history),
size = 4.5,position=position_dodge(.4)) +
geom_line() +
geom_errorbar(aes(ymin=(mean_meanrlogExp)-(se_rlogExp), # new means and se by treatment
ymax=(mean_meanrlogExp)+(se_rlogExp)), # new means and se by treatment
width=0,position=position_dodge(.4)) # width determines the length of the end ticks
plot
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
for (i in 1:nrow(loop_df)) {
df_loop <- rlogExp_Challenge.long.meta.means %>% filter(Airradians.TranscriptID %in% loop_df[i,])
if (nrow(df_loop) == 6) {
loop.table$Airradians_TranscriptID     <- loop_df[i,]
loop.table$baseMeanNAIVE_control       <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'low' & pCO2_history %in% 'low'))$mean.rlogExp
loop.table$baseMeanHABITUATED_control  <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'low' & pCO2_history %in% 'severe'))$mean.rlogExp
loop.table$baseMeanNAIVE_response      <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'severe' & pCO2_history %in% 'low'))$mean.rlogExp
loop.table$baseMeanHABITUATED_response <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'severe' & pCO2_history %in% 'severe'))$mean.rlogExp
loop.table$ControlRatio                <- loop.table$baseMeanHABITUATED_control / loop.table$baseMeanNAIVE_control
loop.table$ResponseRatioHigh           <- ( loop.table$baseMeanHABITUATED_response / loop.table$baseMeanHABITUATED_control ) /
( loop.table$baseMeanNAIVE_response / loop.table$baseMeanNAIVE_control)
loop.table <- loop.table %>%
dplyr::mutate(Frontloaded_criteria = case_when(ControlRatio > 1.2 & ResponseRatioHigh < 1.2 ~ "frontloaded",
ControlRatio < 1.00 & ResponseRatioHigh < 1.00 ~ "low expression relative to naive",
ControlRatio < 1.00 & ResponseRatioHigh > 1.00 ~ "more responsive relative to naive"))
} else {NA}
df <- data.frame(loop.table) # name dataframe for this singl e row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
}
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
for (i in 1:nrow(loop_df)) {
df_loop <- rlogExp_Challenge.long.meta.means %>% filter(Airradians.TranscriptID %in% loop_df[i,])
if (nrow(df_loop) == 6) {
loop.table$Airradians_TranscriptID     <- loop_df[i,]
loop.table$baseMeanNAIVE_control       <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'low' & pCO2_history %in% 'low'))$mean.rlogExp
loop.table$baseMeanHABITUATED_control  <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'low' & pCO2_history %in% 'severe'))$mean.rlogExp
loop.table$baseMeanNAIVE_response      <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'severe' & pCO2_history %in% 'low'))$mean.rlogExp
loop.table$baseMeanHABITUATED_response <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'severe' & pCO2_history %in% 'severe'))$mean.rlogExp
loop.table$ControlRatio                <- loop.table$baseMeanHABITUATED_control / loop.table$baseMeanNAIVE_control
loop.table$ResponseRatioHigh           <- ( loop.table$baseMeanHABITUATED_response / loop.table$baseMeanHABITUATED_control ) /
( loop.table$baseMeanNAIVE_response / loop.table$baseMeanNAIVE_control)
loop.table <- loop.table %>%
dplyr::mutate(Frontloaded_criteria = case_when(ControlRatio > 1.2 & ResponseRatioHigh < 0.8 ~ "frontloaded",
ControlRatio < 1.00 & ResponseRatioHigh < 1.00 ~ "low expression relative to naive",
ControlRatio < 1.00 & ResponseRatioHigh > 1.00 ~ "more responsive relative to naive"))
} else {NA}
df <- data.frame(loop.table) # name dataframe for this singl e row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
}
df_total <- data.frame() # start dataframe
for (i in 1:nrow(loop_df)) {
df_loop <- rlogExp_Challenge.long.meta.means %>% filter(Airradians.TranscriptID %in% loop_df[i,])
if (nrow(df_loop) == 6) {
loop.table$Airradians_TranscriptID     <- loop_df[i,]
loop.table$baseMeanNAIVE_control       <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'low' & pCO2_history %in% 'low'))$mean.rlogExp
loop.table$baseMeanHABITUATED_control  <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'low' & pCO2_history %in% 'severe'))$mean.rlogExp
loop.table$baseMeanNAIVE_response      <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'severe' & pCO2_history %in% 'low'))$mean.rlogExp
loop.table$baseMeanHABITUATED_response <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'severe' & pCO2_history %in% 'severe'))$mean.rlogExp
loop.table$ControlRatio                <- loop.table$baseMeanHABITUATED_control / loop.table$baseMeanNAIVE_control
loop.table$ResponseRatioHigh           <- ( loop.table$baseMeanHABITUATED_response / loop.table$baseMeanHABITUATED_control ) /
( loop.table$baseMeanNAIVE_response / loop.table$baseMeanNAIVE_control)
loop.table <- loop.table %>%
dplyr::mutate(Frontloaded_criteria = case_when(ControlRatio > 1.2 & ResponseRatioHigh < 0.8 ~ "frontloaded",
ControlRatio < 1.00 & ResponseRatioHigh < 1.00 ~ "low expression relative to naive",
ControlRatio < 1.00 & ResponseRatioHigh > 1.00 ~ "more responsive relative to naive"))
} else {NA}
df <- data.frame(loop.table) # name dataframe for this singl e row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
}
df_total %>%
dplyr::mutate(FrontMod_color =
ifelse(ResponseRatioHigh < 1.0 &
ControlRatio > 1.0, "True", "False")) %>%
# dplyr::filter(ControlRatio < 5) %>%
dplyr::filter(ResponseRatioHigh <1.2) %>%
ggplot(aes(x=ResponseRatioHigh, y=ControlRatio)) +
geom_point(aes(color='grey80', na.rm=TRUE)) +
scale_shape_manual(values=c(19,19)) +
scale_color_manual(values=c("grey", "black")) +
theme_classic() +
scale_x_continuous(expand = c(0, 0), breaks=seq(0,2, 0.2)) +
scale_y_continuous(expand = c(0, 0), limits = c(0.9,1.4)) +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Low pCO2 exposure ratio",
x = "Response ratio to high pCO2",
title = "Frontloaded genes; response to High pCO2") +
expand_limits(x = 1.2, y = 1.4) +
annotate("rect", xmin = 0.8, xmax = 1, ymin = 1, ymax = 1.4,
alpha = .2) +
theme(legend.position="none", text = element_text(size=10))
Frontloaded_AirradiansTranscriptIDs <- df_total %>% filter(Frontloaded_criteria %in% 'frontloaded')
IDtargets <- rlogExp_LowvHigh.long.meta.means %>% dplyr::filter(Airradians.TranscriptID %in%
Frontloaded_AirradiansTranscriptIDs$Airradians_TranscriptID)
unique(IDtargets$Airradians.TranscriptID)
plotting <- IDtargets %>% group_by(pCO2_history, pCO2_exposure) %>%
summarise(mean_meanrlogExp = mean(mean.rlogExp),
sd_rlogExp = sd(mean.rlogExp),
n = n(),
se_rlogExp = sd_rlogExp / sqrt(n)
)
IDtargets_stats <- IDtargets %>% dplyr::filter(pCO2_exposure %in% c('low', 'severe'))
mod <- lm(mean.rlogExp~pCO2_history*pCO2_exposure,data=IDtargets_stats)
IDtargets_stats <- IDtargets %>% dplyr::filter(pCO2_exposure %in% c('low', 'severe'))
IDtargets_stats
Frontloaded_AirradiansTranscriptIDs <- df_total %>% filter(Frontloaded_criteria %in% 'frontloaded')
Frontloaded_AirradiansTranscriptIDs
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
df_total <- data.frame() # start dataframe
for (i in 1:nrow(loop_df)) {
df_loop <- rlogExp_Challenge.long.meta.means %>% filter(Airradians.TranscriptID %in% loop_df[i,])
if (nrow(df_loop) == 6) {
loop.table$Airradians_TranscriptID     <- loop_df[i,]
loop.table$baseMeanNAIVE_control       <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'low' & pCO2_history %in% 'low'))$mean.rlogExp
loop.table$baseMeanHABITUATED_control  <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'low' & pCO2_history %in% 'severe'))$mean.rlogExp
loop.table$baseMeanNAIVE_response      <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'severe' & pCO2_history %in% 'low'))$mean.rlogExp
loop.table$baseMeanHABITUATED_response <- (df_loop %>% dplyr::filter(pCO2_exposure %in% 'severe' & pCO2_history %in% 'severe'))$mean.rlogExp
loop.table$ControlRatio                <- loop.table$baseMeanHABITUATED_control / loop.table$baseMeanNAIVE_control
loop.table$ResponseRatioHigh           <- ( loop.table$baseMeanHABITUATED_response / loop.table$baseMeanHABITUATED_control ) /
( loop.table$baseMeanNAIVE_response / loop.table$baseMeanNAIVE_control)
loop.table <- loop.table %>%
dplyr::mutate(Frontloaded_criteria = case_when(ControlRatio > 1 & ResponseRatioHigh < 1 ~ "frontloaded",
ControlRatio < 1.00 & ResponseRatioHigh < 1.00 ~ "low expression relative to naive",
ControlRatio < 1.00 & ResponseRatioHigh > 1.00 ~ "more responsive relative to naive"))
} else {NA}
df <- data.frame(loop.table) # name dataframe for this singl e row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
}
df_total %>%
dplyr::mutate(FrontMod_color =
ifelse(ResponseRatioHigh < 1.0 &
ControlRatio > 1.0, "True", "False")) %>%
# dplyr::filter(ControlRatio < 5) %>%
dplyr::filter(ResponseRatioHigh <1.2) %>%
ggplot(aes(x=ResponseRatioHigh, y=ControlRatio)) +
geom_point(aes(color='grey80', na.rm=TRUE)) +
scale_shape_manual(values=c(19,19)) +
scale_color_manual(values=c("grey", "black")) +
theme_classic() +
scale_x_continuous(expand = c(0, 0), breaks=seq(0,2, 0.2)) +
scale_y_continuous(expand = c(0, 0), limits = c(0.9,1.4)) +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Low pCO2 exposure ratio",
x = "Response ratio to high pCO2",
title = "Frontloaded genes; response to High pCO2") +
expand_limits(x = 1.2, y = 1.4) +
annotate("rect", xmin = 0.8, xmax = 1, ymin = 1, ymax = 1.4,
alpha = .2) +
theme(legend.position="none", text = element_text(size=10))
Frontloaded_AirradiansTranscriptIDs <- df_total %>% filter(Frontloaded_criteria %in% 'frontloaded')
IDtargets <- rlogExp_LowvHigh.long.meta.means %>% dplyr::filter(Airradians.TranscriptID %in%
Frontloaded_AirradiansTranscriptIDs$Airradians_TranscriptID)
unique(IDtargets$Airradians.TranscriptID)
plotting <- IDtargets %>% group_by(pCO2_history, pCO2_exposure) %>%
summarise(mean_meanrlogExp = mean(mean.rlogExp),
sd_rlogExp = sd(mean.rlogExp),
n = n(),
se_rlogExp = sd_rlogExp / sqrt(n)
)
unique(IDtargets$Airradians.TranscriptID)
View(Frontloaded_AirradiansTranscriptIDs)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
dds_1filt_master
