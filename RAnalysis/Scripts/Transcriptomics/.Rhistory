ggarrange(Frontloaded_plot_1.1, Frontloaded_MEAN.SE_1.1,
Activated_plot_1.1,    Activated_MEAN.SE_1.1,
ncol=2, nrow=2)
Frontloaded_plot_1.1 <- df_total_1.1 %>%
# dplyr::filter(ControlRatio < 5) %>%
# dplyr::filter(ResponseRatio  < 25) %>%
ggplot(aes(x=ResponseRatio, y=ControlRatio)) +
geom_point(aes(color='grey80', na.rm=TRUE)) +
scale_shape_manual(values=c(19,19)) +
scale_color_manual(values=c("grey", "black")) +
theme_classic() +
# scale_x_continuous(expand = c(0, 0), limits = c(0.9,1.1)) +
# scale_y_continuous(expand = c(0, 0), limits = c(0.95,1.1)) +
stat_smooth(method = "lm",
formula = y ~ x + poly(x, 2) - 1) +
geom_vline(xintercept=1, linetype="dotted") +
geom_hline(yintercept=1, linetype="dotted") +
labs(y= "Control ratio, under matched pCO2",
x = "Response ratio, under mismatched pCO2",
title = "Frontloading criteria (shaded)") +
expand_limits(x = 1.1, y = 1.1) +
annotate("rect", xmin = 0.9, xmax = 1, ymin = 1, ymax = 1.1,
alpha = .2) +
theme(legend.position="none", text = element_text(size=10))
# truncate df_total for only genes assigned as 'frontloaded' from module red
Frontloaded_AirradiansTranscriptIDs <- merge((df_total_1.1 %>%
filter(Frontloaded_criteria == 'frontloaded')),
AirrdiansTranscript_Proteinnames_2,
by = c('Protein_name','Airradians.TranscriptID'))
nrow(Frontloaded_AirradiansTranscriptIDs) # 234,  379
# truncate the vst Exp means (mean exp for each gene within pCO2 history * pCO2 exposure, N = 5 each)
Frontload_vst       <- vstExp_ChallengeUP.long.meta.means %>%
dplyr::filter(Airradians.TranscriptID %in%
unique(Frontloaded_AirradiansTranscriptIDs$Airradians.TranscriptID))
Frontload_vst_levels <- Frontload_vst %>%
dplyr::filter(pCO2_exposure %in% c('low', 'severe')) %>%
dplyr::mutate(MatchMismatch = case_when(
(pCO2_history %in% 'low'    & pCO2_exposure %in% 'low')    ~ "baseline",
(pCO2_history %in% 'severe' & pCO2_exposure %in% 'severe') ~ "baseline",
(pCO2_history %in% 'low'    & pCO2_exposure %in% 'severe') ~ "change",
(pCO2_history %in% 'severe' & pCO2_exposure %in% 'low')    ~ "change",TRUE ~ NA
)) %>%
dplyr::mutate(IDvar = paste0(pCO2_history,MatchMismatch))
Frontload_vst_levels$MatchMismatch <- as.factor(Frontload_vst_levels$MatchMismatch)
Frontload_vst_levels$IDvar         <- as.factor(Frontload_vst_levels$IDvar)
Frontload_plotting <- Frontload_vst_levels %>%
dplyr::group_by(pCO2_history, MatchMismatch) %>%
dplyr::summarise(mean_meanvstExp = mean(mean.vstExp),
sd_vstExp = sd(mean.vstExp),
n = n(),
se_vstExp = sd_vstExp / sqrt(n))
Frontloaded_MEAN.SE_1.1 <- Frontload_plotting %>%
dplyr::filter(MatchMismatch %in% c('baseline', 'change')) %>%
ggplot(aes(x=MatchMismatch, y = mean_meanvstExp, fill=pCO2_history)) +
geom_point(aes(shape=pCO2_history, fill=pCO2_history),
size = 4.5,position=position_dodge(.4)) +
geom_line() +
theme_classic() +
labs(y= "vst expression",
x = "pCO2 exposure",
title = "Frontloaded genes (N=234)") +
geom_errorbar(aes(ymin=(mean_meanvstExp)-(se_vstExp), # new means and se by treatment
ymax=(mean_meanvstExp)+(se_vstExp)), # new means and se by treatment
width=0,position=position_dodge(.4)) # width determines the length of the end ticks
ggarrange(Frontloaded_plot_1.1, Frontloaded_MEAN.SE_1.1,
Activated_plot_1.1,    Activated_MEAN.SE_1.1,
ncol=2, nrow=2)
mod <- lm(mean.vstExp~pCO2_history*MatchMismatch,data=Frontload_vst_levels)
# STATISTICS
library(car)
levene.test(mod)
leveneTest(mod)
shapiro.test(resid(mod)) # p-value < 2.2e-16
?scheirerRayHare
library(Rmisc)
leveneTest(mod) #0.9094
mod <- scheirerRayHare(mean.vstExp~pCO2_history*MatchMismatch,data=Frontload_vst_levels)
library(rcompanion)
mod <- scheirerRayHare(mean.vstExp~pCO2_history*MatchMismatch,data=Frontload_vst_levels)
mod
# Kruskal-Wallis chi-squared = 16.9, df = 3, p-value = 0.0007411
modDunn <-  dunnTest(mean.vstExp ~ IDvar,
data=Frontload_vst_levels,
method="bh")
library(FSA)
# Kruskal-Wallis chi-squared = 16.9, df = 3, p-value = 0.0007411
modDunn <-  dunnTest(mean.vstExp ~ IDvar,
data=Frontload_vst_levels,
method="bh")
modDunn
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
# load libraries - notes show the install command needed to install (pre installed)
library(goseq) #BiocManager::install('goseq')
# install.packages('GSEABase')
# BiocManager::install('GSEABase')
library(dplyr)
library(forcats)
library(ggplot2)
library(gridExtra)
library(tidyr)
library(grDevices)
library(reshape2)
library(Rmisc)
library(ggpubr)
library(tibble)
library(hrbrthemes)
library(gridExtra)
library(tidyr)
library(zoo)
library(circlize)
library(GSEABase)
library(GSEABase)
library(data.table)
library(stringr)
library(data.table)
library(stringr)
library(tidyverse)
library(GSEABase)
library(data.table)
library(stringr)
library(tidyverse)
library(readxl)
# load the frotnaoded gene set
Frontloaded_UP    <- read.csv("Output/Transcriptomics/WGCNA/challenge/Frontloading/UPmodulePinkMagenta_Frontloaded.csv")
# load the frotnaoded gene set
Frontloaded_UP    <- read.csv("Output/Transcriptomics/WGCNA/challenge/Frontloading/UPmodulePinkMagenta_Frontloaded.csv")
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
# load the frotnaoded gene set
Frontloaded_UP    <- read.csv("Output/Transcriptomics/WGCNA/challenge/Frontloading/UPmodulePinkMagenta_Frontloaded.csv")
Activated_UP    <- read.csv("Output/Transcriptomics/WGCNA/challenge/Frontloading/UPmodulePinkMagenta_Activated.csv")
Frontloaded_DOWN  <- read.csv("Output/Transcriptomics/WGCNA/challenge/Frontloading/DOWNmoduleBrownRed_CostlyActivation.csv")
# GOslim
slim              <- getOBOCollection("http://current.geneontology.org/ontology/subsets/goslim_generic.obo") #get GO database - # call goslim_generic.obo terms as 'slim'
Cvirginica_annot_reference  <- read.csv(file="Data/Transcriptomics/metadata/seq_id_AirrCvirg_MERGED_master.csv", sep=',', header=TRUE) %>%
# dplyr::select(c('TranscriptID','Function','GeneID')) %>%
dplyr::select(c('Airradians_TranscriptID','blastxEval_CvirgProteinID',
'blastxEval_CvirgGOterms', 'meanLength')) %>%
dplyr::mutate(TranscriptID = gsub(" ", "", Airradians_TranscriptID))
read.csv(file="Data/Transcriptomics/metadata/seq_id_AirrCvirg_MERGED_master.csv", sep=',', header=TRUE) %>%
# dplyr::select(c('TranscriptID','Function','GeneID')) %>%
dplyr::select(c('transcript_id','blastxEval_CvirgProteinID',
'blastxEval_CvirgGOterms', 'meanLength'))
Cvirginica_annot_reference  <- read.csv(file="Data/Transcriptomics/metadata/seq_id_AirrCvirg_MERGED_master.csv", sep=',', header=TRUE) %>%
# dplyr::select(c('TranscriptID','Function','GeneID')) %>%
dplyr::select(c('transcript_id','blastxEval_CvirgProteinID',
'blastxEval_CvirgGOterms', 'meanLength'))
# master reference view te master ref R script for details
Master_ref  <- read.csv(file= "Data/Transcriptomics/metadata/Seq_Cvirg_Reference.csv", sep=',', header=TRUE) %>%
dplyr::select(c('Cvirginica_TranscriptID','Annotation_GO_ID', 'Cvirginica_length'))
Cvirginica_annot_reference  <- read.csv(file="Data/Transcriptomics/metadata/seq_id_AirrCvirg_MERGED_master.csv", sep=',', header=TRUE) %>%
# dplyr::select(c('TranscriptID','Function','GeneID')) %>%
dplyr::select(c('transcript_id','blastxEval_CvirgProteinID',
'blastxEval_CvirgGOterms', 'meanLength'))
# call the GO terms
Cvirginica_GOterms                <- as.data.frame(Cvirginica_annot_reference) %>%
dplyr::select(c('transcript_id','blastxEval_CvirgGOterms'))
colnames(Cvirginica_GOterms)[1:2] <- c('transcript.ID', 'GO.terms') # call gene name and the GO terms - (Uniprot ID 'V5')
splitted                          <- strsplit(as.character(Cvirginica_GOterms$GO.terms), ";") #slit into multiple GO ids by delimiter'; ' remember the space after ; is needed here! without this you will only call the first listed GO term for each gene!
GO.terms                          <- data.frame(v1 = rep.int(Cvirginica_GOterms$transcript.ID, sapply(splitted, length)),
v2 = unlist(splitted)) #list all genes with each of their GO terms in a single row
# call the GO terms
Cvirginica_GOterms_Threshold_DOWN                <- as.data.frame(Threshold_DOWN) %>% dplyr::select(c('Airradians.TranscriptID','Annotation_GO_ID'))
Threshold_DOWN
# call the GO terms
Cvirginica_GOterms_DOWN                <- as.data.frame(Frontloaded_DOWN) %>% dplyr::select(c('Airradians.TranscriptID','Annotation_GO_ID'))
colnames(Cvirginica_GOterms_DOWN)[1:2] <- c('transcript.ID', 'GO.terms') # call gene name and the GO terms - (Uniprot ID 'V5')
splitted_DOWN                          <- strsplit(as.character(Cvirginica_GOterms_DOWN$GO.terms), ";") #slit into multiple GO ids by delimiter'; ' remember the space after ; is needed here! without this you will only call the first listed GO term for each gene!
GO.terms_DOWN                          <- data.frame(v1 = rep.int(Cvirginica_GOterms_DOWN$transcript.ID,
sapply(splitted_DOWN, length)),
v2 = unlist(splitted_DOWN)) #list all genes with each of their GO terms in a single row
# call the GO terms
Cvirginica_GOterms_UP                <- as.data.frame(Frontloaded_UP) %>% dplyr::select(c('Airradians.TranscriptID','Annotation_GO_ID'))
colnames(Cvirginica_GOterms_UP)[1:2] <- c('transcript.ID', 'GO.terms') # call gene name and the GO terms - (Uniprot ID 'V5')
splitted_UP                          <- strsplit(as.character(Cvirginica_GOterms_UP$GO.terms), ";") #slit into multiple GO ids by delimiter'; ' remember the space after ; is needed here! without this you will only call the first listed GO term for each gene!
GO.terms_UP                          <- data.frame(v1 = rep.int(Cvirginica_GOterms_UP$transcript.ID,
sapply(splitted_UP, length)),
v2 = unlist(splitted_UP)) #list all genes with each of their GO terms in a single row
# call the GO terms
Cvirginica_GOterms_Activated_UP                <- as.data.frame(Activated_UP) %>% dplyr::select(c('Airradians.TranscriptID','Annotation_GO_ID'))
colnames(Cvirginica_GOterms_Activated_UP)[1:2] <- c('transcript.ID', 'GO.terms') # call gene name and the GO terms - (Uniprot ID 'V5')
splitted_Activated_UP                          <- strsplit(as.character(Cvirginica_GOterms_Activated_UP$GO.terms), ";") #slit into multiple GO ids by delimiter'; ' remember the space after ; is needed here! without this you will only call the first listed GO term for each gene!
GO.terms_Activated_UP                          <- data.frame(v1 = rep.int(Cvirginica_GOterms_Activated_UP$transcript.ID,
sapply(splitted_Activated_UP, length)),
v2 = unlist(splitted_Activated_UP)) #list all genes with each of their GO terms in a single row
# Prepare dataframe(s) and vectors for goseq
# Format 'GO.term' for goseq from the P.generosa annotation .fna file 'Geoduck_annotation'
GO_unique.genes_UP  <- as.vector(unique(Frontloaded_UP$Airradians.TranscriptID)) # call all unique genes for GO analysis (goseq)
# Gene length
GO_gene.length_UP   <- unique(Frontloaded_UP %>% dplyr::select(c("Airradians.TranscriptID","Cvirginica_length")))
# merge length with counts data
length_vector_UP    <- GO_gene.length_UP$Cvirginica_length
GeneLength.UP       <-  dplyr::inner_join(Frontloaded_UP,
unique((GO_gene.length_UP %>%
dplyr::rename(TranscriptID = Airradians.TranscriptID)),
by='TranscriptID'))
# call length values for goseq - confirms that the IDvector and length_vector are the same!!!
sum(sapply(length_vector_UP,length)) == dim(Frontloaded_UP)[1] #should be TRUE
GeneLength.UP       <-  dplyr::inner_join(Frontloaded_UP,
unique((GO_gene.length_UP %>%
dplyr::rename(TranscriptID = Airradians.TranscriptID)),
by='TranscriptID'))
Frontloaded_UP
dplyr::inner_join(Frontloaded_UP,
unique((GO_gene.length_UP %>%
dplyr::rename(TranscriptID = Airradians.TranscriptID)),
by='TranscriptID'))
dim(Frontloaded_UP)[1]
sum(sapply(length_vector_UP,length))
dim(Frontloaded_UP)[1]
# call length values for goseq - confirms that the IDvector and length_vector are the same!!!
sum(sapply(length_vector_UP,length)) == dim(Frontloaded_UP)[1] #should be TRUE
# Prepare dataframe(s) and vectors for goseq
# Format 'GO.term' for goseq from the P.generosa annotation .fna file 'Geoduck_annotation'
GO_unique.genes_Activated_UP  <- as.vector(unique(Activated_UP$Airradians.TranscriptID)) # call all unique genes for GO analysis (goseq)
# Gene length
GO_gene.length_Activated_UP   <- unique(Activated_UP %>% dplyr::select(c("Airradians.TranscriptID","Cvirginica_length")))
# merge length with counts data
length_vector_Activated_UP    <- GO_gene.length_Activated_UP$Cvirginica_length
GeneLength.Activated_UP       <-  dplyr::inner_join(Activated_UP,
unique((GO_gene.length_Activated_UP %>%
dplyr::rename(TranscriptID = Airradians.TranscriptID)),
by='TranscriptID'))
# call length values for goseq - confirms that the IDvector and length_vector are the same!!!
sum(sapply(length_vector_Activated_UP,length)) == dim(Activated_UP)[1] #should be TRUE
# Prepare dataframe(s) and vectors for goseq
# Format 'GO.term' for goseq from the P.generosa annotation .fna file 'Geoduck_annotation'
GO_unique.genes_DOWN  <- as.vector(unique(Frontloaded_DOWN$Airradians.TranscriptID)) # call all unique genes for GO analysis (goseq)
# Gene length
GO_gene.length_DOWN   <- unique(Frontloaded_DOWN %>% dplyr::select(c("Airradians.TranscriptID","Cvirginica_length")))
# merge length with counts data
length_vector_DOWN    <- GO_gene.length_DOWN$Cvirginica_length
GeneLength.DOWN       <-  dplyr::inner_join(Frontloaded_DOWN,
unique((GO_gene.length_DOWN %>%
dplyr::rename(TranscriptID = Airradians.TranscriptID)),
by='TranscriptID'))
# call length values for goseq - confirms that the IDvector and length_vector are the same!!!
sum(sapply(length_vector_DOWN,length)) == dim(Frontloaded_DOWN)[1] #should be TRUE
sum(sapply(length_vector_DOWN,length))
dim(Frontloaded_DOWN)[1]
e
GO_unique.genes.all  <- as.vector(unique(Cvirginica_annot_reference$Airradians_TranscriptID)) # call all unique genes for GO analysis (goseq)
GO_gene.length       <- unique(Cvirginica_annot_reference %>% dplyr::select(c("Airradians_TranscriptID","meanLength")))
GO_gene.length       <- unique(Cvirginica_annot_reference %>% dplyr::select(c("transcript.ID","meanLength")))
Cvirginica_annot_reference
GO_gene.length       <- unique(Cvirginica_annot_reference %>% dplyr::select(c("transcript.ID","meanLength")))
Cvirginica_annot_reference
GO_gene.length       <- unique(Cvirginica_annot_reference %>% dplyr::select(c("transcript_id","meanLength")))
length_vector        <- GO_gene.length$meanLength
UP_integer <- as.integer(GO_unique.genes.all %in% (Frontloaded_UP$Airradians.TranscriptID)) # w/o day-specific ID vector
names(UP_integer)=GO_unique.genes.all # rename
UP_pwf     <- nullp(UP_integer, id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
GO_unique.genes.all  <- as.vector(unique(Cvirginica_annot_reference$Airradians_TranscriptID)) # call all unique genes for GO analysis (goseq)
GO_gene.length       <- unique(Cvirginica_annot_reference %>% dplyr::select(c("transcript_id","meanLength")))
length_vector        <- GO_gene.length$meanLength
Activated_UP_integer <- as.integer(GO_unique.genes.all %in%
(Activated_UP$Airradians.TranscriptID)) # w/o day-specific ID vector
names(Activated_UP_integer)=GO_unique.genes.all # rename
Activated_UP_pwf     <- nullp(Activated_UP_integer, id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
GO_unique.genes.all
length_vector
Activated_UP_integer
UP_integer
UP_integer <- as.integer(GO_unique.genes.all %in% (Frontloaded_UP$transcript_id)) # w/o day-specific ID vector
names(UP_integer)=GO_unique.genes.all # rename
UP_pwf     <- nullp(UP_integer, id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
Frontloaded_UP$transcript_id
UP_integer <- as.integer(GO_unique.genes.all %in% (Frontloaded_UP$transcript_id)) # w/o day-specific ID vector
Frontloaded_UP
GO_unique.genes.all
GO_unique.genes.all  <- as.vector(unique(Cvirginica_annot_reference$transcript_id)) # call all unique genes for GO analysis (goseq)
GO_gene.length       <- unique(Cvirginica_annot_reference %>% dplyr::select(c("transcript_id","meanLength")))
length_vector        <- GO_gene.length$meanLength
UP_integer <- as.integer(GO_unique.genes.all %in% (Frontloaded_UP$Airradians.TranscriptID)) # w/o day-specific ID vector
UP_integer
names(UP_integer)=GO_unique.genes.all # rename
UP_pwf     <- nullp(UP_integer, id=GO_unique.genes.all, bias.data=length_vector) # make figure margins large enough for this to run...
UP_goseq   <- goseq(UP_pwf, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
UP_GO.05   <- data.frame(UP_goseq$category[UP_goseq$over_represented_pvalue<.05]) # change twice here
colnames(UP_GO.05) <- c("category")
UP_GO.05           <- merge(UP_GO.05, UP_goseq, by="category") # change here
UP_GO.05           <- UP_GO.05[order(UP_GO.05$ontology, UP_GO.05$over_represented_pvalue,-UP_GO.05$numDEInCat),] %>%
dplyr::mutate(term = as.factor(term))
UP_GO.05_filtered <- UP_GO.05 %>%
dplyr::mutate(numDEInCat = as.numeric(numDEInCat)) %>%
dplyr::filter(!(numDEInCat<2 & ontology == "BP"), !(numDEInCat<2 & ontology == "MF"))
UP_GO.05_filtered
# LOAD PACKAGES
library(clusterProfiler)
# LOAD PACKAGES
library(clusterProfiler)
library(KEGGREST)
BiocManager::install('clusterProfiler')
# LOAD PACKAGES
library(clusterProfiler)
library(tidyr)
library(stringr)
library(forcats)
library(ggplot2)
library(scales)
library(ape)
library(data.table)
library(tidyverse)
library(fBasics)
library(dplyr)
library(BaseSet)
# set working directory
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis") # sets the working
# modul membership files - change col name to Airradians_TranscriptID to merge with KEGG ids in later chunk
Challenge_WGCNA.data <- read.csv(file="Output/Transcriptomics/WGCNA/challenge/Challenge_WGCNA_ModulMembership.csv",
sep=',', header=TRUE) %>%  dplyr::rename('Airradians_TranscriptID' =
'Airradians.TranscriptID')
Cohort_WGCNA.data  <- read.csv(file="Output/Transcriptomics/WGCNA/cohorts/Cohorts_WGCNA_ModulMembership.csv",
sep=',', header=TRUE) %>%  dplyr::rename('Airradians_TranscriptID' =
'Airradians.TranscriptID')
FrontloadedUP_WGCNA.data <- read.csv(file="Output/Transcriptomics/WGCNA/challenge/Frontloading/UPmodulePinkMagenta_Frontloaded.csv",
sep=',', header=TRUE) %>%  dplyr::rename('Airradians_TranscriptID' =
'Airradians.TranscriptID')
FrontloadedUP_WGCNA.data
# reference Cvirginica KEGG IDs (contains )
Cvirg_KEGGIDs_Ref  <- read.csv(file = "Data/Transcriptomics/metadata/Seq_Cvirg_Reference.csv",header = T) %>%
dplyr::mutate(Cvirginica_KEGGID = paste0('cvn:',gsub(".*LOC", "", Cvirginica_GeneID)))
# diamond bastx output of Airradians genome with Cvirg query
Airr_Cvirg_diamond <- read.csv(file = "Data/Transcriptomics/metadata/seq_id_AirrCvirg_MERGED_master.csv",header = T) %>%
dplyr::rename('Cvirginica_TranscriptID' = 'blastxEval_CvirgTranscriptID') %>%
dplyr::select('Airradians_TranscriptID',
'Cvirginica_TranscriptID')
read.csv(file = "Data/Transcriptomics/metadata/seq_id_AirrCvirg_MERGED_master.csv",header = T)
# diamond bastx output of Airradians genome with Cvirg query
Airr_Cvirg_diamond <- read.csv(file = "Data/Transcriptomics/metadata/seq_id_AirrCvirg_MERGED_master.csv",header = T) %>%
dplyr::rename('Cvirginica_TranscriptID' = 'blastxEval_CvirgTranscriptID',
'Airradians_TranscriptID' =  'transcript_id') %>%
dplyr::select('Airradians_TranscriptID',
'Cvirginica_TranscriptID')
Crass_virg_kegglist            <- keggList("cvn")
Crass_virg_kegglist_dataframe  <- as.data.frame(Crass_virg_kegglist) %>%  rownames_to_column() # with will allow us to merge
colnames(Crass_virg_kegglist_dataframe) <- c('sseqid', 'Gene_name')
nrow(Cvirg_KEGGIDs_Ref) # 59089
nrow(Airr_Cvirg_diamond) # 19108
Airr_Cvirg_Cgig_KEGG <- merge(Cvirg_KEGGIDs_Ref, Airr_Cvirg_diamond, by = 'Cvirginica_TranscriptID', all=T)
nrow(Airr_Cvirg_Cgig_KEGG) # 64705
# challenge
nrow(Challenge_WGCNA.data) # 8176
nrow(Challenge_WGCNA.data %>%  na.omit()) # 4993
Challenge_WGCNA.data.merged <- merge(Challenge_WGCNA.data, Airr_Cvirg_Cgig_KEGG, by = 'Airradians_TranscriptID')
nrow(Challenge_WGCNA.data.merged) # 7032 - note that many Airradians IDs do not have a corresponding Cvirg hit for annot
# Using KEGGREST
# KEGGREST prep
pathways.list <- keggList("pathway", "cvn")
# Pull all genes for each pathway
pathway.codes <- sub("path:", "", names(pathways.list))
genes.by.pathway <- sapply(pathway.codes,
function(pwid){
pw <- keggGet(pwid)
if (is.null(pw[[1]]$GENE)) return(NA)
pw2 <- pw[[1]]$GENE[c(TRUE,FALSE)] # may need to modify this to c(FALSE, TRUE) for other organisms
pw2 <- unlist(lapply(strsplit(pw2, split = ";", fixed = T), function(x)x[1]))
return(pw2)
}
)
# Challenge
WGCNA_sigmodules_1 <- as.data.frame(c('pink',
'magenta',
'brown',
'red'))
head(genes.by.pathway)
# Challenge
WGCNA_sigmodules_1 <- as.data.frame(c('pink',
'magenta',
'brown',
'red'))
# Challenge - frontloaded genes
WGCNA_sigmodules_1.frontUP <- as.data.frame(c('pink'))
# this is used for the randsum - does not print out the path name with the wilcox test, need to merge
# it to the dataframe by common column (enirchKEGG in clusterProfiler inserts the KEGG pathway name - I will need the code to omit the Crassostrea string later..)
pathtable <- as.data.frame(pathways.list) %>%
dplyr::mutate(pathname = sapply(strsplit(pathways.list, " - Crassostrea"), "[",1)) %>%
tibble::rownames_to_column("cvn_code")
pathtable
# prep loop for cumulative output table
df_total                   <- data.frame() # start dataframe
# run echirchKEGG using clusterProfiler
KEGG_clustProfiler_1    <- data.frame(matrix(nrow = 1, ncol = 11)) # create dataframe to save cumunalitively during for loop
colnames(KEGG_clustProfiler_1) <- c('Day', 'modColor', 'KEGGID_pathway', 'pathway.name' ,
'Num.genes.all', 'Num.genes.exp', 'Gene.IDs',
'Rich_factor', 'pvalue', 'log10_pvalue', 'qvalue') # names for comuns in the for loop
modColor     <- WGCNA_sigmodules_1[1,1]
pval_colname <- paste0('p.MM.',modColor)
mm_colname   <- paste0('MM.',modColor)
ModuleLoop   <- as.data.frame(Challenge_WGCNA.data.merged %>%
dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('Airradians_TranscriptID',
'Cgigas_KEGGID', #'geneSymbol',
pval_colname, mm_colname)) %>%
dplyr::filter(.[[3]] < 0.05) %>%  # & .[[4]] > 0.6) %>%
dplyr::select(c('Airradians_TranscriptID', 'Cvirg_KEGGID', pval_colname)) %>%
na.omit() %>%
dplyr::mutate(Cgigas_KEGGID = gsub(".*:","",Cgigas_KEGGID)) %>%
unnest(Cgigas_KEGGID))
as.data.frame(Challenge_WGCNA.data.merged %>%
dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('Airradians_TranscriptID',
'Cgigas_KEGGID', #'geneSymbol',
pval_colname, mm_colname))
as.data.frame(Challenge_WGCNA.data.merged %>%
dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('Airradians_TranscriptID',
'Cvirg_KEGGID', #'geneSymbol',
pval_colname, mm_colname))
Challenge_WGCNA.data.merged %>%
dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('Airradians_TranscriptID',
'Cvirg_KEGGID', #'geneSymbol',
pval_colname, mm_colname))
Challenge_WGCNA.data.merged
ModuleLoop   <- as.data.frame(Challenge_WGCNA.data.merged %>%
dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('Airradians_TranscriptID',
'Cgigas_KEGGID', #'geneSymbol',
pval_colname, mm_colname)) %>%
dplyr::filter(.[[3]] < 0.05) %>%  # & .[[4]] > 0.6) %>%
dplyr::select(c('Airradians_TranscriptID', 'Cgigas_KEGGID', pval_colname)) %>%
na.omit() %>%
dplyr::mutate(Cgigas_KEGGID = gsub(".*:","",Cgigas_KEGGID)) %>%
unnest(Cgigas_KEGGID))
ModuleLoop
# run for loop
for (i in 1:nrow(WGCNA_sigmodules_1)) {
modColor     <- WGCNA_sigmodules_1[i,1]
pval_colname <- paste0('p.MM.',modColor)
mm_colname   <- paste0('MM.',modColor)
ModuleLoop   <- as.data.frame(Challenge_WGCNA.data.merged %>%
dplyr::filter(moduleColor %in% modColor)  %>%
dplyr::select(c('Airradians_TranscriptID',
'Cgigas_KEGGID', #'geneSymbol',
pval_colname, mm_colname)) %>%
dplyr::filter(.[[3]] < 0.05) %>%  # & .[[4]] > 0.6) %>%
dplyr::select(c('Airradians_TranscriptID', 'Cgigas_KEGGID', pval_colname)) %>%
na.omit() %>%
dplyr::mutate(Cgigas_KEGGID = gsub(".*:","",Cgigas_KEGGID)) %>%
unnest(Cgigas_KEGGID))
ModuleLoop2   <- as.data.frame(Challenge_WGCNA.data.merged %>%
dplyr::filter(moduleColor %in% 'salmon')  %>%
dplyr::select(c('Airradians_TranscriptID',
'Cgigas_KEGGID', #'geneSymbol',
pval_colname, mm_colname)) %>%
dplyr::filter(.[[3]] < 0.05) %>%  # & .[[4]] > 0.6) %>%
dplyr::select(c('Airradians_TranscriptID', 'Cgigas_KEGGID', pval_colname)) %>%
na.omit() %>%
dplyr::mutate(Cgigas_KEGGID = gsub(".*:","",Cgigas_KEGGID)) %>%
unnest(Cgigas_KEGGID))
ModuleLoop <- rbind(ModuleLoop2[,c(1:2)],ModuleLoop[,c(1:2)])
entrezID_vector <- as.vector(as.numeric(ModuleLoop$Cgigas_KEGGID))
KEGG_cgigas     <- enrichKEGG(gene = entrezID_vector,
organism  = 'crg', # 'hsa' is human 'crg' is pacific oyster
pvalueCutoff = 0.05)
if (  nrow(as.data.frame(head(KEGG_cgigas))) > 0 ) {
# creat dateframe and write the csv file out
df                      <- as.data.frame(head(KEGG_cgigas))
rownames(df)            <- c()
KEGGoutput              <- as.data.frame(do.call(cbind.data.frame, df)) %>%
dplyr::mutate(
Rich_factor  = (  (as.numeric(sub("/.*", "", GeneRatio))) /
(as.numeric(sub("/.*", "", BgRatio)))),
Day = 'Day14',
modColor = modColor) %>%
dplyr::rename(KEGGID_pathway = ID,
pathway.name   = Description,
Gene.IDs       = geneID,
Num.genes.exp  = Count) %>%
dplyr::mutate(Num.genes.all  = (as.numeric(sub("/.*", "", BgRatio))),
log10_pvalue   = abs(log10(pvalue)),
pathway.name = sapply(strsplit(pathway.name, " - Crassostrea"),
"[",1)) %>% # ommit the unneeded pathway string
dplyr::select('Day', 'modColor', 'KEGGID_pathway', 'pathway.name',
'Num.genes.all', 'Num.genes.exp', 'Gene.IDs',
'Rich_factor', 'pvalue', 'log10_pvalue', 'qvalue') %>%
arrange(desc(as.numeric(Rich_factor)))
write.csv(KEGGoutput, file = paste("Output/Transcriptomics/WGCNA/challenge/KEGG/parsed_by_module/Challenge_",modColor,"_KEGG_clusterProfiler.csv", sep =''))
# Plot
plot<- KEGGoutput %>%
ggplot(aes(x=reorder(pathway.name, Rich_factor), y= Rich_factor)) +
geom_point( aes(col=qvalue, size=Num.genes.exp)) +   # Draw points
geom_segment(aes(x=pathway.name,
xend=pathway.name,
y=min(Rich_factor),
yend=max(Rich_factor)),
linetype=NA,
size=0) +   # Draw dashed lines
labs(title="Challenge",
x = "Pathway",
y = "Rich Factor",
subtitle=paste("WGCNA Module:", modColor, sep =' ')) +
theme_bw() +
coord_flip()
pdf(paste("Output/Transcriptomics/WGCNA/challenge/KEGG/parsed_by_module/Richfactor_plots/Challenge_",modColor,"_RichFactorPlot.pdf", sep =''),
width=8, height=6)
print(plot)
dev.off()
# stringsplit and unnest for a data set of genes and IDs associated with each pathway
KEGGoutput$Gene.IDs               <- as.vector(strsplit(as.character(KEGGoutput$Gene.IDs), "/"))
KEGGoutput_unnest                 <- unnest(KEGGoutput, Gene.IDs)
KEGGoutput_unnest$Cgigas_KEGGID   <- paste("crg:", KEGGoutput_unnest$Gene.IDs, sep='')
KEGGoutput_allgenes                 <- merge(KEGGoutput_unnest, Airr_Cvirg_Cgig_KEGG, by='Cgigas_KEGGID') %>%
group_by(pathway.name) %>%
arrange(Cvirginica_Protein_name, .by_group = TRUE) %>%
unique()
write.csv(KEGGoutput_allgenes, file = paste("Output/Transcriptomics/WGCNA/challenge/KEGG/parsed_by_module/Challenge_",modColor,"_KEGG_clusterProfiler_unlisted.csv", sep =''))
# print(KEGG.Day2_clustProfiler) # print to monitor progress
# master cumulative file
KEGG_clustProfiler_1 <- rbind(KEGG_clustProfiler_1,KEGGoutput) #bind to a cumulative list dataframe
} else {}
}
