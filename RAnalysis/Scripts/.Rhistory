#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_DOWN, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) + #Set the plot background #set title attributes
#geom_hline(yintercept=0.25, linetype="dashed",  color = "black", size=2) +
facet_wrap(ontology ~., scales="free_y", ncol= 1, strip.position="right", shrink = T)
Activated_GOEnrichment
Threshold.GO.results  <- Threshold_DOWN_GO.05_filtered %>%
dplyr::filter(!ontology %in% 'CC') %>%
dplyr::select(!'under_represented_pvalue') %>%
dplyr::rename(Gene_count = numDEInCat, GO_term = term) %>%
dplyr::mutate(Gene_ratio = Gene_count/numInCat) %>%
dplyr::select(-'numInCat') %>%
dplyr::rename(GO_ID = category, pvalue = over_represented_pvalue)
Threshold_GOEnrichment <- Threshold.GO.results  %>%
dplyr::select(c('GO_term', 'ontology', 'pvalue', 'Gene_count',  'Gene_ratio')) %>%
dplyr::filter(!ontology %in% 'CC') %>%
dplyr::filter(!GO_term %in% 'biosynthetic process') %>%
dplyr::mutate(log10_pvalue = -log10(pvalue)) %>%
na.omit() %>%
# dplyr::mutate(GO_term = tidytext::reorder_within(log10_pvalue)) %>%
ggplot(aes(x=reorder(GO_term, log10_pvalue), y= log10_pvalue, size = Gene_count)) +
geom_segment( aes(x=reorder(GO_term, log10_pvalue),
xend=reorder(GO_term, log10_pvalue),
y=1, yend=log10_pvalue,  size = 3)) +
scale_color_manual(values=c("grey20")) +
# scale_size_discrete(range=c(1:20)) +
#scale_color_gradient(low = "orange", high = "blue") +
geom_point(aes(size = Gene_count), shape =21,  fill = "white") + # shap = 15 (squares)
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("Costly Acitvation Genes: GO Enrichment") +
#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_DOWN, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) + #Set the plot background #set title attributes
#geom_hline(yintercept=0.25, linetype="dashed",  color = "black", size=2) +
facet_wrap(ontology ~., scales="free_y", ncol= 1, strip.position="right", shrink = T)
Threshold_GOEnrichment
CostlyActivation_GOEnrichment
DOWN_GO.05_filtered$Type = 'down'
UP_GO.05_filtered$Type   = 'up'
Moduel.GO.results  <- rbind(DOWN_GO.05_filtered, UP_GO.05_filtered) %>%
dplyr::filter(!ontology %in% 'CC') %>%
dplyr::select(!'under_represented_pvalue') %>%
dplyr::rename(Gene_count = numDEInCat, GO_term = term) %>%
dplyr::mutate(Gene_ratio = Gene_count/numInCat) %>%
dplyr::select(-'numInCat') %>%
dplyr::rename(GO_ID = category, pvalue = over_represented_pvalue)
Frontloaded_GOEnrichment <- Moduel.GO.results  %>%
dplyr::select(c('GO_term', 'ontology', 'pvalue', 'Gene_count',  'Type')) %>%
dplyr::filter(!ontology %in% 'CC') %>%
dplyr::filter(!GO_term %in% 'biosynthetic process') %>%
dplyr::mutate(log10_pvalue = -log10(pvalue)) %>%
na.omit() %>%
# dplyr::mutate(GO_term = tidytext::reorder_within(log10_pvalue)) %>%
ggplot(aes(x=reorder(GO_term, log10_pvalue), y= log10_pvalue, size = Gene_count)) +
geom_segment( aes(x=reorder(GO_term, log10_pvalue),
xend=reorder(GO_term, log10_pvalue),
y=1, yend=log10_pvalue,  size = 3)) +
scale_color_manual(values=c("grey20")) +
#scale_color_gradient(low = "orange", high = "blue") +
geom_point(aes(size = Gene_count), shape =21,  fill = "white") + # shap = 15 (squares)
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position="bottom"
) +
xlab("") +
ylab("") +
ggtitle("Frontloaded Genes: GO Enrichment") +
#geom_label(aes(x = 0.5, y = 0.5, label = paste(num_DOWN, "DEGs"))) +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
panel.grid.major = element_blank(), #Set major gridlines
panel.grid.minor = element_blank(), #Set minor gridlines
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) + #Set the plot background #set title attributes
#geom_hline(yintercept=0.25, linetype="dashed",  color = "black", size=2) +
facet_wrap(Type+ontology ~., scales="free_y", ncol= 1, strip.position="right", shrink = T)
Frontloaded_GOEnrichment
# rename cateroy to GO terms in the enriched terms file
# note: we now want the genes associated with each enriched term!
UP_GO.05_filtered <- UP_GO.05_filtered %>% dplyr::rename(GO_terms = category)
# using string split to call all GO IDs in the frontloaded gene set
s <- strsplit(Frontloaded_UP$Annotation_GO_ID, split = ";")
# make a datafrmaae of all unlisted GO terms n the frontloaded gene set
Frontloaded_UP_ALL_GOterms_unlisted  <- data.frame(Protein_Name =
rep(Frontloaded_UP$Protein_name, sapply(s, length)),
GO_terms = unlist(s))
# now we can merge these files - the upregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Frontloaded_UP_GOterms_genes <- merge(UP_GO.05_filtered, Frontloaded_UP_ALL_GOterms_unlisted, by = 'GO_terms') %>% dplyr::filter(!ontology %in% 'CC')
# now we can merge these files - the upregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Frontloaded_UP_GOterms_genes <- merge(UP_GO.05_filtered,
Frontloaded_UP_ALL_GOterms_unlisted,
by = 'GO_terms') %>%
dplyr::filter(!ontology %in% 'CC')
Frontloaded_UP_GOterms_genes
# write cv file
write.csv(Frontloaded_UP_GOterms_genes,"Output/Transcriptomics/WGCNA/challenge/Frontloading/Frontloaded_GOEnrichment_all_genes.csv") # save csv
# rename cateroy to GO terms in the enriched terms file
# note: we now want the genes associated with each enriched term!
DOWN_GO.05_filtered <- DOWN_GO.05_filtered %>% dplyr::rename(GO_terms = category)
# using string split to call all GO IDs in the frontloaded gene set
s <- strsplit(Frontloaded_DOWN$Annotation_GO_ID, split = ";")
# make a datafrmaae of all unlisted GO terms n the frontloaded gene set
Frontloaded_DOWN_ALL_GOterms_unlisted  <- data.frame(Protein_Name =
rep(Frontloaded_DOWN$Protein_name, sapply(s, length)),
GO_terms = unlist(s))
# now we can merge these files - the DOWNregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Frontloaded_DOWN_GOterms_genes <- merge(DOWN_GO.05_filtered, Frontloaded_DOWN_ALL_GOterms_unlisted, by = 'GO_terms') %>% dplyr::filter(!ontology %in% 'CC')
Frontloaded_DOWN_GOterms_genes
# write cv file
write.csv(Frontloaded_DOWN_GOterms_genes,"Output/Transcriptomics/WGCNA/challenge/Frontloading/CostlyActivation_GOEnrichment_all_genes.csv") # save csv
# rename cateroy to GO terms in the enriched terms file
# note: we now want the genes associated with each enriched term!
Threshold_DOWN_GO.05_filtered <- Threshold_DOWN_GO.05_filtered %>% dplyr::rename(GO_terms = category)
# using string split to call all GO IDs in the frontloaded gene set
s <- strsplit(Threshold_DOWN$Annotation_GO_ID, split = ";")
# make a datafrmaae of all unlisted GO terms n the frontloaded gene set
Threshold_DOWN_ALL_GOterms_unlisted  <- data.frame(Protein_Name =
rep(Threshold_DOWN$Protein_name, sapply(s, length)),
GO_terms = unlist(s))
# now we can merge these files - the DOWNregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Threshold_DOWN_GOterms_genes <- merge(Threshold_DOWN_GO.05_filtered,
Threshold_DOWN_ALL_GOterms_unlisted, by = 'GO_terms') %>%
dplyr::filter(!ontology %in% 'CC')
Threshold_DOWN_GOterms_genes
# write cv file
write.csv(Threshold_DOWN_GOterms_genes,"Output/Transcriptomics/WGCNA/challenge/Frontloading/Threshold_GOEnrichment_all_genes.csv") # save csv
# rename cateroy to GO terms in the enriched terms file
# note: we now want the genes associated with each enriched term!
Activated_UP_GO.05_filtered <- Activated_UP_GO.05_filtered %>% dplyr::rename(GO_terms = category)
# using string split to call all GO IDs in the frontloaded gene set
s <- strsplit(Activated_UP$Annotation_GO_ID, split = ";")
# make a datafrmaae of all unlisted GO terms n the frontloaded gene set
Activated_UP_ALL_GOterms_unlisted  <- data.frame(Protein_Name =
rep(Activated_UP$Protein_name, sapply(s, length)),
GO_terms = unlist(s))
# now we can merge these files - the upregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Activated_UP_GOterms_genes <- merge(Activated_UP_GO.05_filtered,
Activated_UP_ALL_GOterms_unlisted,
by = 'GO_terms') %>%
dplyr::filter(!ontology %in% 'CC')
Activated_UP_GOterms_genes
CostlyActivation_GOEnrichment
Activated_GOEnrichment
# rename cateroy to GO terms in the enriched terms file
# note: we now want the genes associated with each enriched term!
Activated_UP_GO.05_filtered <- Activated_UP_GO.05_filtered %>% dplyr::rename(GO_terms = category)
# rename cateroy to GO terms in the enriched terms file
# note: we now want the genes associated with each enriched term!
Activated_UP_GO.05_filtered <- Activated_UP_GO.05_filtered %>% dplyr::rename(GO_terms = category)
Activated_UP_GO.05_filtered
# using string split to call all GO IDs in the frontloaded gene set
s <- strsplit(Activated_UP$Annotation_GO_ID, split = ";")
s
# make a datafrmaae of all unlisted GO terms n the frontloaded gene set
Activated_UP_ALL_GOterms_unlisted  <- data.frame(Protein_Name =
rep(Activated_UP$Protein_name, sapply(s, length)),
GO_terms = unlist(s))
Activated_UP_ALL_GOterms_unlisted
# now we can merge these files - the upregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Activated_UP_GOterms_genes <- merge(Activated_UP_GO.05_filtered,
Activated_UP_ALL_GOterms_unlisted,
by = 'GO_terms') %>%
dplyr::filter(!ontology %in% 'CC')
Activated_UP_GOterms_genes
Activated_UP_ALL_GOterms_unlisted
merge(Activated_UP_GO.05_filtered,
Activated_UP_ALL_GOterms_unlisted,
by = 'GO_terms')
Activated_UP_ALL_GOterms_unlisted
merge(Activated_UP_GO.05_filtered,
Activated_UP_ALL_GOterms_unlisted,
by = 'GO_terms')
Activated_UP_GO.05_filtered
Activated_UP_ALL_GOterms_unlisted
Frontloaded_UP_ALL_GOterms_unlisted
Frontloaded_UP_GOterms_genes
UP_GO.05_filtered
Frontloaded_UP_ALL_GOterms_unlisted
# make a datafrmaae of all unlisted GO terms n the frontloaded gene set
Frontloaded_UP_ALL_GOterms_unlisted  <- data.frame(Protein_Name =
rep(Frontloaded_UP$Protein_name, sapply(s, length)),
GO_terms = unlist(s))
# make a datafrmaae of all unlisted GO terms n the frontloaded gene set
Frontloaded_UP_ALL_GOterms_unlisted  <- data.frame(Protein_Name =
rep(Frontloaded_UP$Protein_name, sapply(s, length)),
GO_terms = unlist(s))
# rename cateroy to GO terms in the enriched terms file
# note: we now want the genes associated with each enriched term!
UP_GO.05_filtered <- UP_GO.05_filtered %>% dplyr::rename(GO_terms = category)
# using string split to call all GO IDs in the frontloaded gene set
s <- strsplit(Frontloaded_UP$Annotation_GO_ID, split = ";")
# make a datafrmaae of all unlisted GO terms n the frontloaded gene set
Frontloaded_UP_ALL_GOterms_unlisted  <- data.frame(Protein_Name =
rep(Frontloaded_UP$Protein_name, sapply(s, length)),
GO_terms = unlist(s))
Frontloaded_UP_ALL_GOterms_unlisted
UP_GO.05_filtered
# now we can merge these files - the upregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Frontloaded_UP_GOterms_genes <- merge(UP_GO.05_filtered,
Frontloaded_UP_ALL_GOterms_unlisted,
by = 'GO_terms') %>%
dplyr::filter(!ontology %in% 'CC')
Frontloaded_UP_GOterms_genes
Activated_UP_GOterms_genes
# make a datafrmaae of all unlisted GO terms n the frontloaded gene set
Activated_UP_ALL_GOterms_unlisted  <- data.frame(Protein_Name =
rep(Activated_UP$Protein_name, sapply(s, length)),
GO_terms = unlist(s))
# using string split to call all GO IDs in the frontloaded gene set
s <- strsplit(Activated_UP$Annotation_GO_ID, split = ";")
# make a datafrmaae of all unlisted GO terms n the frontloaded gene set
Activated_UP_ALL_GOterms_unlisted  <- data.frame(Protein_Name =
rep(Activated_UP$Protein_name, sapply(s, length)),
GO_terms = unlist(s))
Activated_UP_ALL_GOterms_unlisted
Activated_UP_GO.05_filtered
# now we can merge these files - the upregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Activated_UP_GOterms_genes <- merge(Activated_UP_GO.05_filtered,
Activated_UP_ALL_GOterms_unlisted,
by = 'GO_terms') %>%
dplyr::filter(!ontology %in% 'CC')
Activated_UP_GOterms_genes
# using string split to call all GO IDs in the frontloaded gene set
s <- strsplit(Frontloaded_DOWN$Annotation_GO_ID, split = ";")
# make a datafrmaae of all unlisted GO terms n the frontloaded gene set
Frontloaded_DOWN_ALL_GOterms_unlisted  <- data.frame(Protein_Name =
rep(Frontloaded_DOWN$Protein_name, sapply(s, length)),
GO_terms = unlist(s))
# now we can merge these files - the DOWNregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Frontloaded_DOWN_GOterms_genes <- merge(DOWN_GO.05_filtered, Frontloaded_DOWN_ALL_GOterms_unlisted, by = 'GO_terms') %>% dplyr::filter(!ontology %in% 'CC')
Frontloaded_DOWN_GOterms_genes
# using string split to call all GO IDs in the frontloaded gene set
s <- strsplit(Threshold_DOWN$Annotation_GO_ID, split = ";")
# make a datafrmaae of all unlisted GO terms n the frontloaded gene set
Threshold_DOWN_ALL_GOterms_unlisted  <- data.frame(Protein_Name =
rep(Threshold_DOWN$Protein_name, sapply(s, length)),
GO_terms = unlist(s))
# now we can merge these files - the DOWNregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Threshold_DOWN_GOterms_genes <- merge(Threshold_DOWN_GO.05_filtered,
Threshold_DOWN_ALL_GOterms_unlisted, by = 'GO_terms') %>%
dplyr::filter(!ontology %in% 'CC')
Threshold_DOWN_GOterms_genes
Activated_UP_GO.05_filtered
g
# now we can merge these files - the upregulated terms (with GO terms ad no genes) with the unlisted fil eocntinaing genes and terms!
# objective here to expand the enrichment file to contain each gene associated wit enriched terms!
Activated_UP_GOterms_genes <- merge(Activated_UP_GO.05_filtered,
Activated_UP_ALL_GOterms_unlisted,
by = 'GO_terms') %>%
dplyr::filter(!ontology %in% 'CC')
Activated_UP_GOterms_genes
library(betareg) # runs a beta regression model suotable for proportion (percent data) between 0 and 1 (our live and dead cells data)
library(lmtest) # to receive p value from betareg model
library(FSA) # for the Dun test post hoc for SRH non-parametric 2 way anova]
library(emmeans)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(car)
library(lmerTest)
library(tidyr)
library(reshape2)
library(ggpubr)
library(nlme)
library(rcompanion) # to run the Schrier -Ray-Hare non parametric 2 way
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis") # sets the working directory for the entire R markdown file - no need to reload the wd
# getwd()
# read data
data  <- read.csv(file="../Data/FlowCytometry/Hemolymph_data_raw.csv", header = TRUE) %>%
dplyr::mutate(Scallop_ID = as.character(Scallop_ID))
# notes: the dissection team and hemolymph extration team were given
# sheet to note if/when there was a sampling error with individuals
# of particular interest was notes of 'hitting the gut' from the appearance of
# extracted hemolymph - this was particularly confined to scallops # 5 with 'some gonad for scallop #s 56 and 87
# filter out data points based on visual diagnositcs of flow cytometry data
# criterion being, but not limited to, uninterpretable clouds showing no biological importance
# these data were (in most cases) specific to a probe and not the whole individual across all measurements
data_filt <- data %>%
# PERCENT/PROPORTION LIVE AND DEAD CELLS
# first note NAs for SYBR + PI = 51 and 59 and 60
dplyr::mutate(SYBR_PI_count_alive= #as.numeric(sub(",", "", SYBR_PI_count_alive))) %>%
# ifelse(Scallop_ID %in% 5,
ifelse(Scallop_ID %in% c('5', '56', '87'),
# ifelse(Scallop_ID %in% c('5', '20', '51', '59', '60', '56','87'),
# ifelse(Scallop_ID %in% c('5', '51', '59', '60'),
NA, as.numeric(SYBR_PI_count_alive))) %>%  # for #s insert Na, else insert oG data
dplyr::mutate(SYBR_PI_count_dead = #as.numeric(sub(",", "", SYBR_PI_count_dead))) %>%
# ifelse(Scallop_ID %in% 5,
ifelse(Scallop_ID %in% c('5', '56', '87'),
# ifelse(Scallop_ID %in% c('5', '20', '51', '59', '60', '56','87'),
# ifelse(Scallop_ID %in% c('5', '51', '59', '60'),
NA, as.numeric(SYBR_PI_count_dead))) %>%  # for #s insert Na, else insert oG data
# MITOCHONDRIAL SUPEROXIDE DISMUTASE
# NA for mitosox green data day 1: = #s 5 (cotaminated 24 (24  abnormal count of events, very low)
# 74 recomemnded but seems ok
# NA for mitosox green data day 14: 50 (no events), 27 (less events but not different from others),
# 56 (gonad cont.), 87 (strange density gonad cont.), 90 (cut off, but okay)
dplyr::mutate(MitoSoxGreen_Mean_FL1 = #as.numeric(sub(",", "", MitoSoxGreen_Mean_FL1))) %>%
# ifelse(Scallop_ID %in% c('5', '24', '74', '27','50','56', '87','90'),
# ifelse(Scallop_ID %in% 5,
ifelse(Scallop_ID %in% c('5','56','24','87'),
NA, as.numeric(MitoSoxGreen_Mean_FL1))) %>% # for #s insert NA, else insert oG data
# MITOCHONDRIAL MEMBRANE POTENTIAL DATA
# NA for JC-10 = 12,13, 51, 74
dplyr::mutate(JC10_FL1_monomer =  #as.numeric(JC10_FL1_monomer)) %>%
ifelse(Scallop_ID %in% c('12', '13', '51', '74', # day 1 data that was marked as error
'5','56', '87'), # outliers in day 14 data
NA, JC10_FL1_monomer)) %>% # for #s insert Na, else insert oG data insert oG data
dplyr::mutate(JC10_FL2_Jaggregate =  #as.numeric(JC10_FL2_Jaggregate)) %>%
ifelse(Scallop_ID %in% c('12', '13', '51', '74', # day 1 data that was marked as error
'5','56', '87'), # outliers in day 14 data
NA, JC10_FL2_Jaggregate)) %>% # for #s insert Na, else insert oG data insert oG data
# calculate the FL2:FL1 ratio - this is our core data for this metric!
dplyr::mutate(JC10_FL2_FL1_Ratio =
( (as.numeric(JC10_FL2_Jaggregate)) /
(as.numeric(JC10_FL1_monomer)) )) %>%
# ADJUSTED PERCENT DATA - CHANGE TO PROPORTION 0-1
# the current precent alive and dead is proportion to ALL events of the cytogram - including those NOT dyed by SYBR and PI
# here we do an ADJ percent calc through sum of ONLY the live and dead events for a new 100
# second, adjusted 100% for ONLY counts live and dead
dplyr::mutate(SYBR_PI_prop_alive_ADJ =
(SYBR_PI_count_alive/(SYBR_PI_count_alive+SYBR_PI_count_dead))) %>%
dplyr::mutate(SYBR_PI_prop_dead_ADJ =
(SYBR_PI_count_dead/(SYBR_PI_count_alive+SYBR_PI_count_dead))) %>%
dplyr::mutate(pCO2_baseline_change =
case_when(
(pCO2_history == 'low'      & pCO2_exposure == 'low') ~ 'baseline',
(pCO2_history == 'moderate' & pCO2_exposure == 'moderate') ~ 'baseline',
(pCO2_history == 'severe'   & pCO2_exposure == 'severe') ~ 'baseline',
.default = 'change'
))
#write csv for filtered data
data_filt %>% dplyr::filter(JC10_FL2_Jaggregate %in% NA) # as 5 12 13 51 64 74 56 and 87
write.csv(data_filt, file = "../Data/FlowCytometry/Hemolymph_data_filtered.csv")
# FILTER DATA FOR THE DAY 1 AND DAY 14 DATA
Day1_datafilt  <- data_filt %>% dplyr::filter(Date %in% 20230502)
Day14_datafilt <- data_filt %>% dplyr::filter(Date %in% 20230516)
# View(Day14_datafilt)
# View(data)
Day1_PropLive_RxnNorm <- data_filt %>% # data %>%
# edit data to suit out needs
dplyr::filter(Date %in% 20230502) %>% # filter for desired date of rhte experiment
dplyr::select(c('Date','pCO2_exposure','pCO2_history','SYBR_PI_prop_alive_ADJ')) %>%
na.omit() %>%
group_by(pCO2_exposure, pCO2_history) %>% # group by columns for treatment
dplyr::summarise( # summarise to aquire the mean and SE for plotting
PercLive_mean = mean(SYBR_PI_prop_alive_ADJ), # mean
PercLive_sd = sd(SYBR_PI_prop_alive_ADJ), # sd
n = n(), # count
PercLive_se = PercLive_sd / sqrt(n)) %>% # SE
# plot it
ggplot(aes(x=pCO2_exposure, y=PercLive_mean, group=pCO2_history)) +
geom_line(aes(group = factor(pCO2_history), linetype = pCO2_history), size = 0.5, position=position_dodge(.4)) +  # connect a line between variables
scale_linetype_manual(values=c("solid", "dashed", "dotted")) +
geom_point(aes(shape=pCO2_history, fill=pCO2_history), size = 4,position=position_dodge(.4)) +
scale_shape_manual(values=c(16, 17, 4)) + # filled circle, filled triangle, and X
scale_fill_manual(values = c("#009E73","#E69F00", "#CC79A7")) +
geom_errorbar(aes(ymin=(PercLive_mean)-(PercLive_se),
ymax=(PercLive_mean)+(PercLive_se)),
width=.2,position=position_dodge(.4)) +
# geom_jitter() +
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ggtitle("Percent alive cells - 24 hours") +
labs(y= "Percent alive cells (%)", x = "pCO2 Exposure") # +
# facet_wrap(~pCO2_history)
Day1_PropLive_RxnNorm
Day14_PropDead_RxnNorm <- data_filt %>% # data %>%
# edit data to suit out needs
dplyr::filter(Date %in% 20230516) %>% # filter for desired date of rhte experiment
dplyr::select(c('Date','pCO2_exposure','pCO2_history','SYBR_PI_prop_dead_ADJ')) %>%
na.omit() %>%
group_by(pCO2_exposure, pCO2_history) %>% # group by columns for treatment
dplyr::summarise( # summarise to aquire the mean and SE for plotting
PercDead_mean = mean(SYBR_PI_prop_dead_ADJ), # mean
PercDead_sd = sd(SYBR_PI_prop_dead_ADJ), # sd
n = n(), # count
PercDead_se = PercDead_sd / sqrt(n)) %>% # SE
# plot it
ggplot(aes(x=pCO2_exposure, y=PercDead_mean, group=pCO2_history)) +
geom_line(aes(group = factor(pCO2_history), linetype = pCO2_history), size = 0.5, position=position_dodge(.4)) +  # connect a line between variables
scale_linetype_manual(values=c("solid", "dashed", "dotted")) +
geom_point(aes(shape=pCO2_history, fill=pCO2_history), size = 4,position=position_dodge(.4)) +
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_shape_manual(values=c(21, 22, 24)) + # filled circle, filled triangle, and X
scale_fill_manual(values = c("#009E73","#E69F00", "#CC79A7")) +
geom_errorbar(aes(ymin=(PercDead_mean)-(PercDead_se),
ymax=(PercDead_mean)+(PercDead_se)),
width=.2,position=position_dodge(.4)) +
theme_classic() +
ggtitle("Percent dead cells - 14 days") +
labs(y= "Percent dead cells (%)", x = "pCO2 Exposure")# +
# facet_wrap(~pCO2_history)
Day14_PropDead_RxnNorm
Day1_PropDead_RxnNorm <- data_filt %>% # data %>%
# edit data to suit out needs
dplyr::filter(Date %in% 20230502) %>% # filter for desired date of rhte experiment
dplyr::select(c('Date','pCO2_exposure','pCO2_history','SYBR_PI_prop_dead_ADJ')) %>%
na.omit() %>%
group_by(pCO2_exposure, pCO2_history) %>% # group by columns for treatment
dplyr::summarise( # summarise to aquire the mean and SE for plotting
PercDead_mean = mean(SYBR_PI_prop_dead_ADJ), # mean
PercDead_sd = sd(SYBR_PI_prop_dead_ADJ), # sd
n = n(), # count
PercDead_se = PercDead_sd / sqrt(n)) %>% # SE
# plot it
ggplot(aes(x=pCO2_exposure, y=PercDead_mean, group=pCO2_history, fill =pCO2_history)) +
geom_line(aes(group = factor(pCO2_history), linetype = pCO2_history), size = 0.5, position=position_dodge(.4)) +  # connect a line between variables
scale_linetype_manual(values=c("solid", "dashed", "dotted")) +
geom_point(aes(shape=pCO2_history, fill=pCO2_history), size = 4,position=position_dodge(.4)) +
scale_shape_manual(values=c(16, 17, 4)) + # filled circle, filled triangle, and X
scale_fill_manual(values = c("#009E73","#E69F00", "#CC79A7")) +
geom_errorbar(aes(ymin=(PercDead_mean)-(PercDead_se),
ymax=(PercDead_mean)+(PercDead_se)),
width=.2,position=position_dodge(.4)) +
# geom_jitter() +
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ggtitle("Percent dead cells - 24 hours") +
labs(y= "Percent dead cells (%)", x = "pCO2 Exposure") #+
# facet_wrap(~pCO2_history)
Day1_PropDead_RxnNorm
Day1_PropDead_RxnNorm <- data_filt %>% # data %>%
# edit data to suit out needs
dplyr::filter(Date %in% 20230502) %>% # filter for desired date of rhte experiment
dplyr::select(c('Date','pCO2_exposure','pCO2_history','SYBR_PI_prop_dead_ADJ')) %>%
na.omit() %>%
group_by(pCO2_exposure, pCO2_history) %>% # group by columns for treatment
dplyr::summarise( # summarise to aquire the mean and SE for plotting
PercDead_mean = mean(SYBR_PI_prop_dead_ADJ), # mean
PercDead_sd = sd(SYBR_PI_prop_dead_ADJ), # sd
n = n(), # count
PercDead_se = PercDead_sd / sqrt(n)) %>% # SE
# plot it
ggplot(aes(x=pCO2_exposure, y=PercDead_mean, group=pCO2_history, fill =pCO2_history)) +
geom_line(aes(group = factor(pCO2_history), linetype = pCO2_history), size = 0.5, position=position_dodge(.4)) +  # connect a line between variables
scale_linetype_manual(values=c("solid", "dashed", "dotted")) +
geom_point(aes(shape=pCO2_history, fill=pCO2_history), size = 4,position=position_dodge(.4)) +
scale_shape_manual(values=c(21, 22, 24)) + # filled circle, filled triangle, and X
scale_fill_manual(values = c("#009E73","#E69F00", "#CC79A7")) +
geom_errorbar(aes(ymin=(PercDead_mean)-(PercDead_se),
ymax=(PercDead_mean)+(PercDead_se)),
width=.2,position=position_dodge(.4)) +
# geom_jitter() +
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ggtitle("Percent dead cells - 24 hours") +
labs(y= "Percent dead cells (%)", x = "pCO2 Exposure") #+
# facet_wrap(~pCO2_history)
Day1_PropDead_RxnNorm
Day1_PropLive_RxnNorm <- data_filt %>% # data %>%
# edit data to suit out needs
dplyr::filter(Date %in% 20230502) %>% # filter for desired date of rhte experiment
dplyr::select(c('Date','pCO2_exposure','pCO2_history','SYBR_PI_prop_alive_ADJ')) %>%
na.omit() %>%
group_by(pCO2_exposure, pCO2_history) %>% # group by columns for treatment
dplyr::summarise( # summarise to aquire the mean and SE for plotting
PercLive_mean = mean(SYBR_PI_prop_alive_ADJ), # mean
PercLive_sd = sd(SYBR_PI_prop_alive_ADJ), # sd
n = n(), # count
PercLive_se = PercLive_sd / sqrt(n)) %>% # SE
# plot it
ggplot(aes(x=pCO2_exposure, y=PercLive_mean, group=pCO2_history)) +
geom_line(aes(group = factor(pCO2_history), linetype = pCO2_history), size = 0.5, position=position_dodge(.4)) +  # connect a line between variables
scale_linetype_manual(values=c("solid", "dashed", "dotted")) +
geom_point(aes(shape=pCO2_history, fill=pCO2_history), size = 4,position=position_dodge(.4)) +
scale_shape_manual(values=c(21, 22, 24)) + # filled circle, filled triangle, and X
scale_fill_manual(values = c("#009E73","#E69F00", "#CC79A7")) +
geom_errorbar(aes(ymin=(PercLive_mean)-(PercLive_se),
ymax=(PercLive_mean)+(PercLive_se)),
width=.2,position=position_dodge(.4)) +
# geom_jitter() +
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
ggtitle("Percent alive cells - 24 hours") +
labs(y= "Percent alive cells (%)", x = "pCO2 Exposure") # +
# facet_wrap(~pCO2_history)
Day1_PropLive_RxnNorm
ggarrange(Day14_PropLive_RxnNorm, Day14_PropDead_RxnNorm, ncol=1)
Day1_PropLive_RxnNorm
ggarrange(Day1_PropLive_RxnNorm, Day14_PropDead_RxnNorm, ncol=1)
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis/Output/FlowCytometry/CellViability_RxnNorm.pdf"), height = 8)
ggarrange(Day1_PropLive_RxnNorm, Day14_PropDead_RxnNorm, ncol=1)
dev.off()
