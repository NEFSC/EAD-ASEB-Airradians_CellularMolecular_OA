# - Why? We unfortunately found that that the dewar was not properly unloaded
# on day 14 of the experiment, below we can reveal replicates that were lost (hence 'NAs' via merge below)
raw_BCA_merged    <- merge(raw_BCA, Exp_metadata, by='Scallop_ID',all=TRUE)
View(raw_BCA_merged)
TotalProtein_final <- raw_BCA_merged_om %>%
dplyr::filter(Type %in% 'Sample') %>% # call samples
dplyr::mutate(Unique_ID =
paste0('Plate_',Plate,'_', Scallop_ID)) %>% # unique ID t0 group by
dplyr::mutate(Abs_562nm_cor = # correct the raw abs, subtract background
case_when(Plate == 1 ~ (Abs_562nm-0.08355), # for plate 1
Plate == 2 ~ (Abs_562nm-0.08090) ) ) %>% # for plate 2
dplyr::mutate(TotalProtein_ug_mL =
case_when(
Scallop_ID %in% c(33, 51) ~ ((Abs_562nm_cor - 0.224)/0.000911), #linear fr neg discrim. - luckily only two values from plate 2
Plate == 1 ~ ((-(b1) + sqrt( (b1^2) - (4*a1*(c1-Abs_562nm_cor)) ) ) / (2*a1)), # quadratic for Plate 1
Plate == 2 | Scallop_ID != c(33, 51) ~ ((-(b2) + sqrt( (b2^2) - (4*a2*(c2-Abs_562nm_cor)) ) ) / (2*a2))  # quadratic for plate 2
),
TotalProtein_ug = TotalProtein_ug_mL*V)
# library(lmtest) # to receive p value from betareg model
# library(FSA) # for the Dun test post hoc for SRH non-parametric 2 way anova]
# library(emmeans)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(car)
# library(lmerTest)
library(tidyr)
# library(reshape2)
library(ggpubr)
# library(nlme)
# library(rcompanion) # to run the Schrier -Ray-Hare non parametric 2 way
library(ggpmisc) # stat_poly for inserting equation and R2 for ggplot line
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis") # sets the working directory for the entire R markdown file - no need to reload the wd
# Ran on 20230828 - Plate 1
raw_0828_plate1      <- read.csv(file="Data/Colorimetric_assays/ATP/Runs_20230828/Plate_1/20230828_ATP_Plate1.csv",
sep = ",",
skip=2,
header=TRUE,
fileEncoding="latin1")
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis") # sets the working directory for the entire R markdown file - no need to reload the wd
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis") # sets the working directory for the entire R markdown file - no need to reload the wd
# Ran on 20230828 - Plate 1
raw_0828_plate1      <- read.csv(file="Data/Colorimetric_assays/ATP/Runs_20230828/Plate_1/20230828_ATP_Plate1.csv",
sep = ",",
skip=2,
header=TRUE,
fileEncoding="latin1")
raw_0828_plate1_mtx  <- as.matrix(raw_0828_plate1[c(1:8),c(3:14)])
colnames(raw_0828_plate1_mtx) = c("1","2","3","4","5","6","7","8","9","10","11","12")
rownames(raw_0828_plate1_mtx) = c("A","B","C","D","E","F","G","H")
raw_0828_plate1_table <- as.data.frame.table(raw_0828_plate1_mtx, responseName = "value") %>%
dplyr::rename(well_row=Var1, well_column=Var2, Abs_570nm=value) %>%
dplyr::mutate(well=paste0(well_row,well_column),
Run_date ="20230828",
Plate="1") %>%
dplyr::select(-c(well_row,well_column))
# Ran on 20230828 - Plate 1, the sceond run about 5  minuts after the first, as "1.2" (20230828_ATP_Plate1_second_run.csv)
raw_0828_plate1.2      <- read.csv(file="Data/Colorimetric_assays/ATP/Runs_20230828/Plate_1/20230828_ATP_Plate1_second_run.csv",
sep = ",",
skip=2,
header=TRUE,
fileEncoding="latin1")
raw_0828_plate1.2_mtx  <- as.matrix(raw_0828_plate1.2[c(1:8),c(3:14)])
colnames(raw_0828_plate1.2_mtx) = c("1","2","3","4","5","6","7","8","9","10","11","12")
rownames(raw_0828_plate1.2_mtx) = c("A","B","C","D","E","F","G","H")
raw_0828_plate1.2_table <- as.data.frame.table(raw_0828_plate1.2_mtx, responseName = "value") %>%
dplyr::rename(well_row=Var1, well_column=Var2, Abs_570nm=value) %>%
dplyr::mutate(well=paste0(well_row,well_column),
Run_date ="20230828",
Plate="1.2") %>%
dplyr::select(-c(well_row,well_column))
# Ran on 20230828 - Plate 2
raw_0828_plate2      <- read.csv(file="Data/Colorimetric_assays/ATP/Runs_20230828/Plate_2/20230828_ATP_Plate2.csv",
sep = ",",
skip=2,
header=TRUE,
fileEncoding="latin1")
raw_0828_plate2_mtx  <- as.matrix(raw_0828_plate2[c(1:8),c(3:14)])
colnames(raw_0828_plate2_mtx) = c("1","2","3","4","5","6","7","8","9","10","11","12")
rownames(raw_0828_plate2_mtx) = c("A","B","C","D","E","F","G","H")
raw_0828_plate2_table <- as.data.frame.table(raw_0828_plate2_mtx, responseName = "value") %>%
dplyr::rename(well_row=Var1, well_column=Var2, Abs_570nm=value) %>%
dplyr::mutate(well=paste0(well_row,well_column),
Run_date ="20230828",
Plate="2") %>%
dplyr::select(-c(well_row,well_column))
# Ran on 20230829 - Plate 1
raw_0829_plate1      <- read.csv(file="Data/Colorimetric_assays/ATP/Runs_20230829/Plate_1/20230829_ATP_Plate1.csv",
sep = ",",
skip=2,
header=TRUE,
fileEncoding="latin1")
raw_0829_plate1_mtx  <- as.matrix(raw_0829_plate1[c(1:8),c(3:14)])
colnames(raw_0829_plate1_mtx) = c("1","2","3","4","5","6","7","8","9","10","11","12")
rownames(raw_0829_plate1_mtx) = c("A","B","C","D","E","F","G","H")
raw_0829_plate1_table <- as.data.frame.table(raw_0829_plate1_mtx, responseName = "value") %>%
dplyr::rename(well_row=Var1, well_column=Var2, Abs_570nm=value) %>%
dplyr::mutate(well=paste0(well_row,well_column),
Run_date ="20230829",
Plate="1") %>%
dplyr::select(-c(well_row,well_column))
# load metadata
metadata      <- read.csv(file="Data/Colorimetric_assays/ATP/Metadata_ATP.csv",
sep = ",",
header=TRUE)
# merge the rbind of all raw data with the metadat
raw_ATP <- merge( (rbind(raw_0828_plate1_table,
raw_0828_plate2_table,
raw_0829_plate1_table)),
(metadata %>% dplyr::select(!Notes)) )
nrow(raw_ATP) # 288
View(raw_ATP)
# plot the data to see any glaring outliers
raw_plot <- raw_ATP %>%
dplyr::filter(Type %in% 'Sample') %>%
ggplot(aes(y = Abs_570nm,
x  = Scallop_ID)) +
geom_point()
raw_plot # we see that there are three samples > 0.2 samples 7, 33, and 82
# further # 68 has the largest separation between the duplicate values withthe former (lower) being more accuratly representative
# omit 4 rows
raw_ATP_om <- raw_ATP %>%
dplyr::filter(!(Type == 'Sample' & Abs_570nm > 0.2)) %>% # omits the high duplicate in  samples 7, 33, and 82
dplyr::filter(!(well %in% 'E10' & Run_date %in% '20230828' & Plate == 1)) # omits sample 68 abs 0.1486; 2x that of the other
nrow(raw_ATP_om) # 284
# write csv
write.csv(raw_ATP_om, file = "Data/Colorimetric_assays/ATP/Raw_Master_ATP.csv")
# Ran on 20230829 - Plate 1
BCA_0829_plate1      <- read.csv(file="Data/Colorimetric_assays/BCA_ATPcorrection/Runs_20230829/Plate_1/20230829_BCA_ATPcorrection_Plate1.csv",
sep = ",",
skip=2,
header=TRUE,
fileEncoding="latin1")
BCA_0829_plate1_mtx  <- as.matrix(BCA_0829_plate1[c(1:8),c(3:14)])
colnames(BCA_0829_plate1_mtx) = c("1","2","3","4","5","6","7","8","9","10","11","12")
rownames(BCA_0829_plate1_mtx) = c("A","B","C","D","E","F","G","H")
BCA_0829_plate1_table <- as.data.frame.table(BCA_0829_plate1_mtx, responseName = "value") %>%
dplyr::rename(well_row=Var1, well_column=Var2, Abs_562nm=value) %>%
dplyr::mutate(well=paste0(well_row,well_column),
Run_date ="20230829",
Plate="1") %>%
dplyr::select(-c(well_row,well_column))
# Ran on 20230829 - Plate 2
BCA_0829_plate2      <- read.csv(file="Data/Colorimetric_assays/BCA_ATPcorrection/Runs_20230829/Plate_2/20230829_BCA_ATPcorrection_Plate2.csv",
sep = ",",
skip=2,
header=TRUE,
fileEncoding="latin1")
BCA_0829_plate2_mtx  <- as.matrix(BCA_0829_plate2[c(1:8),c(3:14)])
colnames(BCA_0829_plate2_mtx) = c("1","2","3","4","5","6","7","8","9","10","11","12")
rownames(BCA_0829_plate2_mtx) = c("A","B","C","D","E","F","G","H")
BCA_0829_plate2_table <- as.data.frame.table(BCA_0829_plate2_mtx, responseName = "value") %>%
dplyr::rename(well_row=Var1, well_column=Var2, Abs_562nm=value) %>%
dplyr::mutate(well=paste0(well_row,well_column),
Run_date ="20230829",
Plate="2") %>%
dplyr::select(-c(well_row,well_column))
# load metadata
metadata_BCA <- read.csv(file="Data/Colorimetric_assays/BCA_ATPcorrection/Metadata_BCA_ATPcorrection.csv",
sep = ",",
header=TRUE)
# merge the rbind of all raw data with the metadat
raw_BCA <- merge( (rbind(BCA_0829_plate1_table,
BCA_0829_plate2_table)),
metadata_BCA)
# plot the data to see any glaring outliers
raw_BCA_plot <- raw_BCA %>%
dplyr::filter(Type %in% 'Sample') %>%
ggplot(aes(y = Abs_562nm,
x  = Scallop_ID)) +
geom_point()
raw_BCA_plot # we see ibe liw outlier, omit the raw data of Abs_562nm < 0.5
# om dataset
raw_BCA_om <- raw_BCA %>%
dplyr::filter(!(Type =='Sample' & Abs_562nm < 0.5))
View(raw_BCA_om)
# write csv
write.csv(raw_BCA_om, file = "Data/Colorimetric_assays/BCA_ATPcorrection/Raw_Master_BCA_ATPcorrection.csv")
Exp_metadata      <- read.csv(file="Data/Experiment_metadata.csv",sep = ",",header=TRUE)
raw_BCA <- read.csv(file = "Data/Colorimetric_assays/BCA_ATPcorrection/Raw_Master_BCA_ATPcorrection.csv", head = T) # the raw_BCA_om file
# * (1) Merge by the common 'Scallop_ID' and retain all rows in the colorimetric data (all=T)
# - Why? We unfortunately found that that the dewar was not properly unloaded
# on day 14 of the experiment, below we can reveal replicates that were lost (hence 'NAs' via merge below)
raw_BCA_merged    <- merge(raw_BCA, Exp_metadata, by='Scallop_ID',all=TRUE)
View(raw_BCA_merged)
# View(raw_BCA_merged)
lost_gill_samples <- raw_BCA_merged %>% dplyr::filter(Abs_562nm %in% NA)
nrow(lost_gill_samples) # 29 -NOTE: NOT ALL of these were lost, some due to low yield of supernatant to run,
# the true value for lost samples
# * (2) ommit NAs - empty wells (no sample or standard)
raw_BCA_merged_om <- raw_BCA_merged %>% dplyr::filter(!Type %in% NA)
# View(raw_BCA_merged_om)
# * (3) separate standards from samples, format the standards
BCA_standards <- raw_BCA_merged_om %>%
dplyr::filter(grepl('Standard', Type)) %>% # grepl for 'contains' string
dplyr::mutate(BCA_ug_mL =
as.numeric(gsub('.*_','',Type))) %>% # (i.e. 25 in 'Standards_25')
dplyr::mutate(Unique_ID = paste0('Plate_',Plate,'_', Type))
# * (4) Run standard curve, calculate totalprotein
BCA_background_zero <- BCA_standards %>%
dplyr::filter(Type %in% 'Standard_0') %>%
dplyr::select(Unique_ID,Plate, BCA_ug_mL,Abs_562nm) %>% # select columns of interest
dplyr::group_by(Unique_ID, Plate, BCA_ug_mL) %>% # group by to get the means
dplyr::summarise_each(funs(mean,sd,se=sd(.)/sqrt(n()))) # get all the stats
# Plate 1, blank to correct by is 0.08355
# Plate 2, blank to correct by is 0.08090
BCA_standards_means <- BCA_standards %>%
#dplyr::filter(!Type %in% 'Standard_0') %>%
dplyr::mutate(Abs_562nm_cor =
case_when(Plate == 1 ~ (Abs_562nm-0.08355),
Plate == 2 ~ (Abs_562nm-0.08090) ) ) %>%
dplyr::select(Unique_ID, Plate, BCA_ug_mL, Abs_562nm_cor) %>% # select columns
dplyr::group_by(Unique_ID, Plate, BCA_ug_mL) %>% # group by to get the means
dplyr::summarise_each(funs(mean,sd,se=sd(.)/sqrt(n()))) # get all the stats
BCA_stand_plots_quadratic <- BCA_standards_means %>% # QUADRATIC SMOOTH LINE WORKS BEST HERE (MANUFACTURERS INSTRUCTIONS)
dplyr::filter(!BCA_ug_mL %in% 25) %>% # hash me out to test
ggplot(aes(y=mean, x=BCA_ug_mL)) +
geom_point() +
theme_bw() +
labs(y= "Net Absorbance at 562nm", x = "Protein Concentration in ug/mL") +
#geom_line() +
#stat_poly_line(color='red') +
#geom_smooth() +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1) +
stat_poly_eq(parse=T, aes(label = ..eq.label..), formula=y ~ x + I(x^2)) +
ggtitle('Quadratic') +
#stat_poly_eq(use_label(c("eq", "R2"))) +
facet_wrap(~Plate)
# NOTE! I found that some of my discriminants are negative (b^2 - 4ac) so Im going to extrapolate from a linear
# curve based on the last few standards
BCA_stand_plots_linear <- BCA_standards_means %>% # QUADRATIC SMOOTH LINE WORKS BEST HERE (MANUFACTURERS INSTRUCTIONS)
dplyr::filter(!BCA_ug_mL %in% c('0','25','125','250','500')) %>% # hash me out to test
ggplot(aes(y=mean, x=BCA_ug_mL)) +
geom_point() +
theme_bw() +
labs(y= "Net Absorbance at 562nm", x = "Protein Concentration in ug/mL") +
#geom_line() +
#stat_poly_line(color='red') +
#geom_smooth() +
stat_smooth(method = "lm", formula = y ~ x, size = 1) +
stat_poly_eq(parse=T, aes(label = ..eq.label..), formula=y ~ x) +
ggtitle('Linear - for negative desriminant') +
#stat_poly_eq(use_label(c("eq", "R2"))) +
facet_wrap(~Plate)
#print
pdf(paste("Data/Colorimetric_assays/BCA_ATPcorrection/Standard_Curve_BCA_ATPcorrection.pdf", sep =''),
width=10,
height=7)
print(ggarrange(BCA_stand_plots_quadratic,BCA_stand_plots_linear))
dev.off()
# Standard curve, Plate 1 equation y = 0.0347 + 0.00127x - 1.01x10^-7x^2 - need to solve for x!
# Standard curve, Plate 2 equation y = 0.045 + 0.00125x - 1.3x10^-7x^2 - need to solve for x!
# * (5) Calculate Total protein per sample; subtract out background + correct for standard curve +  average
# Again, Plate 1 blank to correct by is 0.08355
# Again, Plate 2 blank to correct by is 0.08090
# Standard curve, Plate 1
a1 <- -1.01*10^-7
b1 <- 0.00127
c1 <- 0.0347
# EQ: (-(b1) + sqrt( (b1^2) - (4*(((a1)-Abs_562nm_cor))*(c1)) ))/(2*a1)
# Standard curve, Plate 2
a2 <- -1.3*10^-7
b2 <- 0.00125
c2 <- 0.045
# EQ: (-(b2) + sqrt( (b2^2) - (4*a2*(c2-Abs_562nm_cor)) ) ) / (2*a2)
# linear equation plate 1 == (Abs_562nm_cor - 0.192)/0.000993
# linear equation plate 2 == (Abs_562nm_cor - 0.224)/0.000911
# IMPORTANT! we used 25 ul of the standards and 25 ul of the unknowns (samples)
# therefore we can interpret the unknown direct to the the standard curve without having
# to account for addition factors, fot example, if we used 5 ul unknown (sample) we would have to adjust
# by multiplying by 5 to reach the standard curve
V = 0.025 # 25 ul or 0.025 mL
TotalProtein_final <- raw_BCA_merged_om %>%
dplyr::filter(Type %in% 'Sample') %>% # call samples
dplyr::mutate(Unique_ID =
paste0('Plate_',Plate,'_', Scallop_ID)) %>% # unique ID t0 group by
dplyr::mutate(Abs_562nm_cor = # correct the raw abs, subtract background
case_when(Plate == 1 ~ (Abs_562nm-0.08355), # for plate 1
Plate == 2 ~ (Abs_562nm-0.08090) ) ) %>% # for plate 2
dplyr::mutate(TotalProtein_ug_mL =
case_when(
Scallop_ID %in% c(33, 51) ~ ((Abs_562nm_cor - 0.224)/0.000911), #linear fr neg discrim. - luckily only two values from plate 2
Plate == 1 ~ ((-(b1) + sqrt( (b1^2) - (4*a1*(c1-Abs_562nm_cor)) ) ) / (2*a1)), # quadratic for Plate 1
Plate == 2 | Scallop_ID != c(33, 51) ~ ((-(b2) + sqrt( (b2^2) - (4*a2*(c2-Abs_562nm_cor)) ) ) / (2*a2))  # quadratic for plate 2
),
TotalProtein_ug = TotalProtein_ug_mL*V) %>% # ug per mL concentration to ug in 25 ul sample
dplyr::group_by(Day,pCO2_history,pCO2_exposure,
Unique_ID, Plate, Scallop_ID) %>% # group by to get the means
dplyr::summarise(mean_TotalProtein_ug = mean(TotalProtein_ug),
sd_TotalProtein_ug   = sd(TotalProtein_ug),
n = n(),
se_TotalProtein_ug  = sd_TotalProtein_ug / sqrt(n))
# View(TotalProtein_final)
nrow(TotalProtein_final) # 62
# write csv
write.csv(TotalProtein_final, file = "Data/Colorimetric_assays/BCA_ATPcorrection/Calc_Master_BCA_ATPcorrection.csv")
TotalProtein_final
raw_BCA_merged_om
raw_BCA_merged_om %>%
dplyr::filter(Type %in% 'Sample') %>% # call samples
dplyr::mutate(Unique_ID =
paste0('Plate_',Plate,'_', Scallop_ID)) %>% # unique ID t0 group by
dplyr::mutate(Abs_562nm_cor = # correct the raw abs, subtract background
case_when(Plate == 1 ~ (Abs_562nm-0.08355), # for plate 1
Plate == 2 ~ (Abs_562nm-0.08090) ) ) %>% # for plate 2
dplyr::mutate(TotalProtein_ug_mL =
case_when(
# linear fr neg discrim. - luckily only two values from plate 2
Scallop_ID %in% c(33, 51) ~
((Abs_562nm_cor - 0.224)/0.000911),
# quadratic for Plate 1
Plate == 1 ~
((-(b1) + sqrt( (b1^2) - (4*a1*(c1-Abs_562nm_cor)) ) ) / (2*a1)),
# quadratic for plate 2
Plate == 2 | Scallop_ID != c(33, 51) ~
((-(b2) + sqrt( (b2^2) - (4*a2*(c2-Abs_562nm_cor)) ) ) / (2*a2)) ),
# ug per mL concentration to ug in 25 ul sample
TotalProtein_ug = TotalProtein_ug_mL*V)
test <- raw_BCA_merged_om %>%
dplyr::filter(Type %in% 'Sample') %>% # call samples
dplyr::mutate(Unique_ID =
paste0('Plate_',Plate,'_', Scallop_ID)) %>% # unique ID t0 group by
dplyr::mutate(Abs_562nm_cor = # correct the raw abs, subtract background
case_when(Plate == 1 ~ (Abs_562nm-0.08355), # for plate 1
Plate == 2 ~ (Abs_562nm-0.08090) ) ) %>% # for plate 2
dplyr::mutate(TotalProtein_ug_mL =
case_when(
# linear fr neg discrim. - luckily only two values from plate 2
Scallop_ID %in% c(33, 51) ~
((Abs_562nm_cor - 0.224)/0.000911),
# quadratic for Plate 1
Plate == 1 ~
((-(b1) + sqrt( (b1^2) - (4*a1*(c1-Abs_562nm_cor)) ) ) / (2*a1)),
# quadratic for plate 2
Plate == 2 | Scallop_ID != c(33, 51) ~
((-(b2) + sqrt( (b2^2) - (4*a2*(c2-Abs_562nm_cor)) ) ) / (2*a2)) ),
# ug per mL concentration to ug in 25 ul sample
TotalProtein_ug = TotalProtein_ug_mL*V)
test
calc_BCA_plot <- test %>%
dplyr::filter(Type %in% 'Sample') %>%
ggplot(aes(y = Abs_562nm_cor,
x  = TotalProtein_ug_mL)) +
geom_point()
calc_BCA_plot # we see ibe liw outlier, omit the raw data of Abs_562nm < 0.5
calc_BCA_plot <- test %>%
dplyr::filter(Type %in% 'Sample') %>%
ggplot(aes(y = Abs_562nm_cor,
x  = TotalProtein_ug_mL)) +
geom_point() +
facet_wrap(~Day)
calc_BCA_plot # we see ibe liw outlier, omit the raw data of Abs_562nm < 0.5
calc_BCA_plot <- test %>%
dplyr::filter(Type %in% 'Sample') %>%
ggplot(aes(y = Abs_562nm_cor,
x  = TotalProtein_ug_mL)) +
geom_point() +
facet_wrap(~Plate)
calc_BCA_plot # we see ibe liw outlier, omit the raw data of Abs_562nm < 0.5
test %>% filter(Abs_562nm_cor > 3)
test %>% dplyr::filter(Type %in% 'Sample') %>% dplyr::filter(Abs_562nm_cor > 3)
calc_BCA_plot <- test %>%
dplyr::filter(Type %in% 'Sample') %>%
ggplot(aes(y = Abs_562nm_cor,
x  = TotalProtein_ug_mL)) +
geom_point() +
facet_wrap(~Plate)
calc_BCA_plot # we see ibe liw outlier, omit the raw data of Abs_562nm < 0.5
test %>% dplyr::filter(Type %in% 'Sample') %>% dplyr::filter(Plate == 2 & Abs_562nm_cor > 3)
calc_BCA_plot <- test %>%
dplyr::filter(Type %in% 'Sample') %>%
ggplot(aes(y = Abs_562nm_cor,
x  = TotalProtein_ug_mL)) +
geom_point() +
facet_wrap(~Plate)
calc_BCA_plot # we see ibe liw outlier, omit the raw data of Abs_562nm < 0.5
test %>% dplyr::filter(Type %in% 'Sample') %>% dplyr::filter(Plate == 2 & Abs_562nm_cor > 3)
calc_BCA_plot <- test %>%
dplyr::filter(Type %in% 'Sample') %>%
ggplot(aes(y = Abs_562nm_cor,
x  = TotalProtein_ug_mL)) +
geom_point() +
facet_wrap(~Plate)
calc_BCA_plot # we see ibe liw outlier, omit the raw data of Abs_562nm < 0.5
test %>% dplyr::filter(Type %in% 'Sample') %>% dplyr::filter(Plate == 2 & Abs_562nm_cor > 3)
MASTER_DF <- read.csv(file = "Data/Colorimetric_assays/ATP_Master.csv", head = T)
Day1_TotalProtein_RxnNorm <- MASTER_DF %>% # data %>%
dplyr::filter(Day == 1) %>% # filter for desired date of rhte experiment
dplyr::mutate(mean_TotalProtein_ng = as.numeric(mean_TotalProtein_ng)) %>%
dplyr::select(c('Day','pCO2_exposure','pCO2_history','mean_TotalProtein_ng')) %>%
na.omit() %>%
# we have means (from x2 assay reps per individual), now mean by treatment!
group_by(pCO2_exposure, pCO2_history) %>% # group by columns for treatment
dplyr::summarise( # summarise to acquire the mean and SE for plotting
TP_mean = mean(mean_TotalProtein_ng), # mean
TP_sd = sd(mean_TotalProtein_ng), # sd
TP_n = n(), # count
TP_se = TP_sd / sqrt(TP_n)) %>% # SE
# plot it
ggplot(aes(x=pCO2_exposure, y=TP_mean, group=pCO2_history)) + # call the new mean
geom_line(aes(group = factor(pCO2_history),
linetype = pCO2_history),
size = 0.5,
position=position_dodge(.4)) +  # connect a line between variables
scale_linetype_manual(values=c("solid", "dashed", "dotted")) +
geom_point(aes(shape=pCO2_history, fill=pCO2_history), size = 4.5,position=position_dodge(.4)) +
scale_shape_manual(values=c(21, 22, 24)) + # filled circle, filled triangle, and X
scale_fill_manual(values=c("#009E73","#E69F00", "#CC79A7")) + # fill circles
geom_errorbar(aes(ymin=(TP_mean)-(TP_se), # new means and se by treatment
ymax=(TP_mean)+(TP_se)), # new means and se by treatment
width=0,position=position_dodge(.4)) + # width determines the length of the end ticks
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "none") +
# scale_y_continuous(expand = c(0, 0), limits = c(0, 3)) + # true 0 origin
scale_y_continuous(expand = c(0, 0), limits = c(0, 0.25)) + # true 0 origin
ggtitle("Total Protein") +
labs(y= "Total Protie (ng mL)", x = "pCO2 Exposure")
Day1_TotalProtein_RxnNorm # view the plot
Day14_TotalProtein_RxnNorm <- MASTER_DF %>% # data %>%
dplyr::filter(Day == 14) %>% # filter for desired date of rhte experiment
dplyr::mutate(mean_TotalProtein_ng = as.numeric(mean_TotalProtein_ng)) %>%
dplyr::select(c('Day','pCO2_exposure','pCO2_history','mean_TotalProtein_ng')) %>%
na.omit() %>%
# we have means (from x2 assay reps per individual), now mean by treatment!
group_by(pCO2_exposure, pCO2_history) %>% # group by columns for treatment
dplyr::summarise( # summarise to acquire the mean and SE for plotting
TP_mean = mean(mean_TotalProtein_ng), # mean
TP_sd = sd(mean_TotalProtein_ng), # sd
TP_n = n(), # count
TP_se = TP_sd / sqrt(TP_n)) %>% # SE
# plot it
ggplot(aes(x=pCO2_exposure, y=TP_mean, group=pCO2_history)) + # call the new mean
geom_line(aes(group = factor(pCO2_history),
linetype = pCO2_history),
size = 0.5,
position=position_dodge(.4)) +  # connect a line between variables
scale_linetype_manual(values=c("solid", "dashed", "dotted")) +
geom_point(aes(shape=pCO2_history, fill=pCO2_history), size = 4.5,position=position_dodge(.4)) +
scale_shape_manual(values=c(21, 22, 24)) + # filled circle, filled triangle, and X
scale_fill_manual(values=c("#009E73","#E69F00", "#CC79A7")) + # fill circles
geom_errorbar(aes(ymin=(TP_mean)-(TP_se), # new means and se by treatment
ymax=(TP_mean)+(TP_se)), # new means and se by treatment
width=0,position=position_dodge(.4)) + # width determines the length of the end ticks
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "none") +
# scale_y_continuous(expand = c(0, 0), limits = c(0, 3)) + # true 0 origin
scale_y_continuous(expand = c(0, 0), limits = c(0, 0.25)) + # true 0 origin
ggtitle("Total Protein") +
labs(y= "Total Protien (ng mL)", x = "pCO2 Exposure")
Day14_TotalProtein_RxnNorm # view the plot
ggarrange(Day1_TotalProtein_RxnNorm,Day14_TotalProtein_RxnNorm, ncol=2)
calc_BCA_plot # we see ibe liw outlier, omit the raw data of Abs_562nm < 0.5
BCA_stand_plots_quadratic <- BCA_standards_means %>% # QUADRATIC SMOOTH LINE WORKS BEST HERE (MANUFACTURERS INSTRUCTIONS)
dplyr::filter(!BCA_ug_mL %in% 25) %>% # hash me out to test
ggplot(aes(y=mean, x=BCA_ug_mL)) +
geom_point() +
theme_bw() +
labs(y= "Net Absorbance at 562nm", x = "Protein Concentration in ug/mL") +
#geom_line() +
#stat_poly_line(color='red') +
#geom_smooth() +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1) +
stat_poly_eq(parse=T, aes(label = ..eq.label..), formula=y ~ x + I(x^2)) +
ggtitle('Quadratic') +
#stat_poly_eq(use_label(c("eq", "R2"))) +
facet_wrap(~Plate)
BCA_stand_plots_quadratic
poly.calc(BCA_standards_means$BCA_ug_mL, BCA_standards_means$mean)
library(polynom)
poly.calc(BCA_standards_means$BCA_ug_mL, BCA_standards_means$mean)
# 0.002129919*x - 7.316278e-06*x^2 + 3.224975e-08*x^3
f <- function(x) {
return(0.002129919*x - 7.316278e-06*x^2 + 3.224975e-08*x^3)
}
ggplot(BCA_standards_means, aes(x=BCA_ug_mL, y=mean)) +
geom_point(size=5, col='blue') +
stat_function(fun = f, size=1.25, alpha=0.4)
ggplot(BCA_standards_means, aes(x=BCA_ug_mL, y=mean)) +
geom_point(size=5, col='blue')
poly.calc(BCA_standards_means$BCA_ug_mL, BCA_standards_means$mean)
# 0.002129919*x - 7.316278e-06*x^2 + 3.224975e-08*x^3
f <- function(x) {
return(3.224975e-08*x^3 - 7.316278e-06*x^2 + 0.002129919*x)
}
ggplot(BCA_standards_means, aes(x=BCA_ug_mL, y=mean)) +
geom_point(size=5, col='blue') +
stat_function(fun = f, size=1.25, alpha=0.4)
# 0.002129919*x - 7.316278e-06*x^2 + 3.224975e-08*x^3
f <- function(x) {
return(0.00127x - 1.01x10^-7x^2)
# 0.002129919*x - 7.316278e-06*x^2 + 3.224975e-08*x^3
f <- function(x) {
return(0.00127*x - 1.01*10^-7*x^2)
}
ggplot(BCA_standards_means, aes(x=BCA_ug_mL, y=mean)) +
geom_point(size=5, col='blue') +
stat_function(fun = f, size=1.25, alpha=0.4)
BCA_stand_plots_quadratic <- BCA_standards_means %>% # QUADRATIC SMOOTH LINE WORKS BEST HERE (MANUFACTURERS INSTRUCTIONS)
#dplyr::filter(!BCA_ug_mL %in% 25) %>% # hash me out to test
ggplot(aes(y=mean, x=BCA_ug_mL)) +
geom_point() +
theme_bw() +
labs(y= "Net Absorbance at 562nm", x = "Protein Concentration in ug/mL") +
#geom_line() +
#stat_poly_line(color='red') +
#geom_smooth() +
stat_smooth(method = "lm", formula = y ~ x + I(x^2), size = 1) +
stat_poly_eq(parse=T, aes(label = ..eq.label..), formula=y ~ x + I(x^2)) +
ggtitle('Quadratic') +
#stat_poly_eq(use_label(c("eq", "R2"))) +
facet_wrap(~Plate)
BCA_stand_plots_quadratic
