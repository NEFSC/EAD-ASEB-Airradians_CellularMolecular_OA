View(Airradians_gff)
unique(Airradians_gff$type)
# region     gene       mRNA       exon       CDS        pseudogene tRNA       lnc_RNA    transcript snoRNA
# snRNA      cDNA_match ncRNA      rRNA
View(Airradians_gff)
Airradians_gff_RNA <- Airradians_gff %>%
dplyr::filter(type %in% c('mRNA', 'lnc_RNA', 'rRNA',
'ncRNA', 'snoRNA', 'transcript',
'snRNA')) %>%
dplyr::select(seqid, type, start, end, attributes) %>%
dplyr::rename(NCBI_refseq = seqid)
# assign columns to assign in the for loop
Airradians_gff_RNA$Airradians_TranscriptID <- NA
Airradians_gff_RNA$Airradians_GeneID       <- NA
Airradians_gff_RNA$Airradians_ProteinID    <- NA
for(i in 1:nrow(Airradians_gff_RNA)) {
Airradians_gff_RNA$Airradians_TranscriptID[i]  <- strsplit(Airradians_gff_RNA$attributes[i], "[=:\\;]")[[1]][2]
Airradians_gff_RNA$Airradians_GeneID[i]        <- strsplit(
gsub('.*Parent=gene-', '', Airradians_gff_RNA$attributes[i])
, "[;]")[[1]][1]
Airradians_gff_RNA$Airradians_ProteinID[i]     <- strsplit(
gsub('.*product=', '', Airradians_gff_RNA$attributes[i])
, "[;\\%]")[[1]][1]
}
# Now with the AirradiansIDs and the Cvirgnica GO term refernce - load in the blastx we execuate on SEDNA
# of the Airradians protein database to the Cvirginina and the Cgigas queries to merge their annotation  (GO and KEGG)
# diamond result to obtain accession IDs of annotated genes Cvirg and Cgigas for gene ID, GO, and KEGG ID information
#(1) Airradians protein database (...pep.fna file) with Cvirginica nucleotide query
blastx_Airr_Cvirg <- as.data.table(read.delim2(file="Data/Transcriptomics/hpc_out/diamond/AirrProDB_CvirgNQuery/blastx_AirrProDB_CvirgNQuery_out", header=F)) %>%
`colnames<-`(c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore"))
#(2) Airradians protein database to the Cgigas KEGG query
blastx_Airr_Cgig  <- as.data.table(read.delim2(file="Data/Transcriptomics/hpc_out/diamond/AirrProDB_CgigNKEGGQuery/blastx_AirrProDB_CgigNKEGGNQuery_out", header=F)) %>%
`colnames<-`(c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore"))
# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis") # personal computer
# Now with the AirradiansIDs and the Cvirgnica GO term refernce - load in the blastx we execuate on SEDNA
# of the Airradians protein database to the Cvirginina and the Cgigas queries to merge their annotation  (GO and KEGG)
# diamond result to obtain accession IDs of annotated genes Cvirg and Cgigas for gene ID, GO, and KEGG ID information
#(1) Airradians protein database (...pep.fna file) with Cvirginica nucleotide query
blastx_Airr_Cvirg <- as.data.table(read.delim2(file="Data/Transcriptomics/hpc_out/diamond/AirrProDB_CvirgNQuery/blastx_AirrProDB_CvirgNQuery_out", header=F)) %>%
`colnames<-`(c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore"))
Airradians_gff_region <- Airradians_gff %>%
dplyr::filter(type %in% 'region') %>%
dplyr::select(seqid,attributes)%>%
dplyr::rename(NCBI_refseq = seqid)
Airradians_gff_region$chrom_num = NA
for(i in 1:nrow(Airradians_gff_region)) {
Airradians_gff_region$chrom_num[i]            <- strsplit(
gsub('.*chromosome=', '', Airradians_gff_region$attributes[i])
, "[;]")[[1]][1]
}
Airradians_gff_region_2 <- Airradians_gff_region[,c(1,3)]
Airradians_ref_master <- merge(Airradians_gff_RNA,Airradians_gff_region_2, by = 'NCBI_refseq', all = T) %>%
dplyr::select(!attributes)
nrow(Airradians_ref_master) # 46429
write.csv(Airradians_ref_master, "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis/Data/Transcriptomics/metadata/seq_id_Airradians_master.csv")
library(dplyr)
library(kableExtra)
library(pander)
library(data.table)
library(stringr)
library(devtools)
# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis") # personal computer
# count matrix from prepDE.py script
# NOTE: aligned to the Airradians draft and unannotated genome!
raw.countmatrix  <- read.csv(file="Output/Transcriptomics/raw_count_matrix_all.csv", header=T) %>%
dplyr::rename(transcript_id = X)
raw.countmatrix[is.na(raw.countmatrix)] <- 0 # replace all occurances of NA with 0 in the cell NOT THE WHOLE ROW!
nrow(raw.countmatrix) # 49900 total transcripts
filtered.countmatrix  <- read.csv(file="Output/Transcriptomics/Filtered_count_matrix/filtered_count_matrix_all.csv", header=T) %>%
dplyr::rename(transcript_id = X)
filtered.countmatrix[is.na(filtered.countmatrix)] <- 0 # replace all occurances of NA with 0 in the cell NOT THE WHOLE ROW!
nrow(filtered.countmatrix) # 10001 total transcripts
# Airradians reference file
seq_ref_Airradians  <- read.csv(file="Data/Transcriptomics/hpc_out/diamond/GCF_041381155.1_Ai_NY_genomic_ID_REFERENCE.csv", header=F) %>%
tidyr::separate(V1, into = c("NCBI_refseq", "transcript_id", "gene_id"), sep = " ") %>%
dplyr::mutate(gene_id = gsub(".*gene-", "", gene_id), # convert gene-LOC138315196 to just LOC138315196
sseqid  = paste0(NCBI_refseq,"_cds",gene_id)) # the diamond sseqid name to get cvirg KEGG and cgig IDs
nrow(seq_ref_Airradians)
seq_ref_Airradians  <- read.csv(file="Data/Transcriptomics/metadata/seq_id_Airradians_master.csv")
nrow(seq_ref_Airradians)
seq_ref_Airradians
# count matrix from prepDE.py script
# NOTE: aligned to the Airradians draft and unannotated genome!
raw.countmatrix  <- read.csv(file="Output/Transcriptomics/raw_count_matrix_all.csv", header=T) %>%
dplyr::rename(Airradians_TranscriptID  = X)
raw.countmatrix[is.na(raw.countmatrix)] <- 0 # replace all occurances of NA with 0 in the cell NOT THE WHOLE ROW!
nrow(raw.countmatrix) # 49900 total transcripts
filtered.countmatrix  <- read.csv(file="Output/Transcriptomics/Filtered_count_matrix/filtered_count_matrix_all.csv", header=T) %>%
dplyr::rename(Airradians_TranscriptID  = X)
filtered.countmatrix[is.na(filtered.countmatrix)] <- 0 # replace all occurances of NA with 0 in the cell NOT THE WHOLE ROW!
nrow(filtered.countmatrix) # 10001 total transcripts
raw.countmatrix.REFS <- merge(raw.countmatrix, seq_ref_Airradians, by = 'Airradians_TranscriptID ') # 47704 - there are some omitted accession IDs
raw.countmatrix.REFS <- merge(raw.countmatrix, seq_ref_Airradians, by = 'Airradians_TranscriptID ') # 47704 - there are some omitted accession IDs
seq_ref_Airradians  <- read.csv(file="Data/Transcriptomics/metadata/seq_id_Airradians_master.csv")
nrow(seq_ref_Airradians) # 47516
seq_ref_Airradians
# count matrix from prepDE.py script
# NOTE: aligned to the Airradians draft and unannotated genome!
raw.countmatrix  <- read.csv(file="Output/Transcriptomics/raw_count_matrix_all.csv", header=T) %>%
dplyr::rename(Airradians_TranscriptID  = X)
raw.countmatrix[is.na(raw.countmatrix)] <- 0 # replace all occurances of NA with 0 in the cell NOT THE WHOLE ROW!
nrow(raw.countmatrix) # 49900 total transcripts
raw.countmatrix
raw.countmatrix.REFS <- merge(raw.countmatrix, seq_ref_Airradians, by = 'Airradians_TranscriptID ') # 47704 - there are some omitted accession IDs
raw.countmatrix.REFS <- merge(raw.countmatrix, seq_ref_Airradians, by = 'Airradians_TranscriptID') # 47704 - there are some omitted accession IDs
nrow(raw.countmatrix.REFS)
nrow(raw.countmatrix)
View(Airradians_gff)
View(Airradians_gff)
Airradians_gff <- read.gff("C:/Users/samjg/Documents/Bioinformatics/refs/Airradians/GCF_041381155.1_genomic.gff")
View(Airradians_gff %>% filter(type %in% 'exon'))
View(Airradians_gff %>% filter(type %in% 'gene'))
View(Airradians_gff %>% filter(type %in% 'mRNA'))
# Merge the count matricx with the sequence IDs
# NOTE: this is necessary for the assessement below where sseqid is neeed to merge with the diamon blastx results
View(raw.countmatrix)
nrow(raw.countmatrix.REFS) # 46371 there are some omitted accession IDs
# Now with the AirradiansIDs and the Cvirgnica GO term refernce - load in the blastx we execuate on SEDNA
# of the Airradians protein database to the Cvirginina and the Cgigas queries to merge their annotation  (GO and KEGG)
# diamond result to obtain accession IDs of annotated genes Cvirg and Cgigas for gene ID, GO, and KEGG ID information
#(1) Airradians protein database (...pep.fna file) with Cvirginica nucleotide query
blastx_Airr_Cvirg <- as.data.table(read.delim2(file="Data/Transcriptomics/hpc_out/diamond/AirrProDB_CvirgNQuery/blastx_AirrProDB_CvirgNQuery_out", header=F)) %>%
`colnames<-`(c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore"))
# Now with the AirradiansIDs and the Cvirgnica GO term refernce - load in the blastx we execuate on SEDNA
# of the Airradians protein database to the Cvirginina and the Cgigas queries to merge their annotation  (GO and KEGG)
# diamond result to obtain accession IDs of annotated genes Cvirg and Cgigas for gene ID, GO, and KEGG ID information
#(1) Airradians protein database (...pep.fna file) with Cvirginica nucleotide query
blastx_Airr_Cvirg <- as.data.table(read.delim2(file="Data/Transcriptomics/hpc_out/diamond/AirrProDB_CvirgNQuery/blastx_AirrProDB_CvirgNQuery_out", header=F)) %>%
`colnames<-`(c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore"))
as.data.table(read.delim2(file="Data/Transcriptomics/hpc_out/diamond/AirrProDB_CvirgNQuery/blastx_AirrProDB_CvirgNQuery_out", header=F))
blastx_Airr_Cvirg
#(2) Airradians protein database to the Cgigas KEGG query
blastx_Airr_Cgig  <- as.data.table(read.delim2(file="Data/Transcriptomics/hpc_out/diamond/AirrProDB_CgigNKEGGQuery/blastx_AirrProDB_CgigNKEGGNQuery_out", header=F)) %>%
`colnames<-`(c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore"))
blastx_Airr_Cgig
blastx_Airr_Cvirg
# Get the GO terms fromthe Cvirgnica genome - the bst annoation of a Atlantic mollusc to date
# call the Cvirginica database of protein names and transcript ID calls
Cvirg_seqID      <-  as.data.table(read.delim2(file = "Data/Transcriptomics/metadata/seq_id.txt", header =F)) %>%
`colnames<-`("fullID")
seq_ref_Airradians
# Get the GO terms fromthe Cvirgnica genome - the bst annoation of a Atlantic mollusc to date
# call the Cvirginica database of protein names and transcript ID calls
Cvirg_seqID      <-  as.data.table(read.delim2(file = "Data/Transcriptomics/metadata/seq_id_Cvirg_raw.txt", header =F)) %>%
`colnames<-`("fullID")
nrow(Cvirg_seqID) # 66625
Cvirg_GOterms    <-  read.csv(file = "Data/Transcriptomics/metadata/Cviginiva_GOterms.csv", header =T) %>%
dplyr::select(c('GeneID','Annotation_GO_ID', 'Length')) %>%
dplyr::group_by(GeneID) %>% # tif you add GO column here we get duplicates, some of the same gene ID calls (of diff length) have GO term or do not, weird!
dplyr::summarise(
meanLength = mean(Length)) %>%
unique() # there are many redundant rows here
subset(Cvirg_GOterms,duplicated(GeneID)) # no duplicates, BUT need to filter in the GO terms here
Cvirg_GOterms2 <- merge(Cvirg_GOterms,
( unique(read.csv(file = "Data/Transcriptomics/metadata/Cviginiva_GOterms.csv", header =T) %>%
dplyr::select(c('GeneID','Annotation_GO_ID')) %>%
dplyr::filter(!Annotation_GO_ID == "")) ),
by = 'GeneID')
nrow(Cvirg_GOterms2) #19667
Cvirg_GOterms    <-  read.csv(file = "Data/Transcriptomics/metadata/Cviginiva_GOterms.csv", header =T) %>%
dplyr::select(c('GeneID','Annotation_GO_ID', 'Length')) %>%
dplyr::group_by(GeneID) %>% # tif you add GO column here we get duplicates, some of the same gene ID calls (of diff length) have GO term or do not, weird!
dplyr::summarise(
meanLength = mean(Length)) %>%
unique() # there are many redundant rows here
subset(Cvirg_GOterms,duplicated(GeneID)) # no duplicates, BUT need to filter in the GO terms here
Cvirg_GOterms2 <- merge(Cvirg_GOterms,
( unique(read.csv(file = "Data/Transcriptomics/metadata/Cviginica_GOterms.csv", header =T) %>%
dplyr::select(c('GeneID','Annotation_GO_ID')) %>%
dplyr::filter(!Annotation_GO_ID == "")) ),
by = 'GeneID')
nrow(Cvirg_GOterms2) #19667
Cvirg_GOterms2
# Now with the AirradiansIDs and the Cvirgnica GO term refernce - load in the blastx we execuate on SEDNA
# of the Airradians protein database to the Cvirginina and the Cgigas queries to merge their annotation  (GO and KEGG)
# diamond result to obtain accession IDs of annotated genes Cvirg and Cgigas for gene ID, GO, and KEGG ID information
#(1) Airradians protein database (...pep.fna file) with Cvirginica nucleotide query
blastx_Airr_Cvirg <- as.data.table(read.delim2(file="Data/Transcriptomics/hpc_out/diamond/AirrProDB_CvirgNQuery/blastx_AirrProDB_CvirgNQuery_out", header=F)) %>%
`colnames<-`(c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore"))
#(2) Airradians protein database to the Cgigas KEGG query
blastx_Airr_Cgig  <- as.data.table(read.delim2(file="Data/Transcriptomics/hpc_out/diamond/AirrProDB_CgigNKEGGQuery/blastx_AirrProDB_CgigNKEGGNQuery_out", header=F)) %>%
`colnames<-`(c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore"))
nrow(raw.countmatrix) # 49900 total unique transcrips calls in A irradians count matrix
# how many unique trnascript IDs of Airradians were covered by oyster blastx(s)?
# Cvirginica
length(unique(blastx_Airr_Cvirg$sseqid)) # 19598 - Airradians transcripts - in blast x Airradiads Prot database  to Cvriginica nucleotide query
(length(unique(blastx_Airr_Cvirg$sseqid)) / nrow(raw.countmatrix.REFS))* 100 # 41.08% of genes!
# C gigas
length(unique(blastx_Airr_Cgig$sseqid)) # 19667 - Airradians transcripts - in Cgigas protein database to Airradians nucleotide query
(length(unique(blastx_Airr_Cgig$sseqid)) / nrow(raw.countmatrix.REFS))* 100 #  41.22% of genes!
# by bitscore (highest is the best hit) use 'which.max'
bybitscore  <- blastx_Airr_Cvirg[,.SD[which.max(bitscore)],by=sseqid] # max bitscore
length(unique(bybitscore$sseqid)) # 19598
length(unique(bybitscore$sseqid))  == length(unique(blastx_Airr_Cvirg$sseqid))# TRUE
nrow(bybitscore %>% dplyr::filter(sseqid %in% raw.countmatrix.REFS$sseqid)) # 19351
raw.countmatrix.REFS
nrow(bybitscore %>% dplyr::filter(sseqid %in% raw.countmatrix.REFS$NCBI_refseq)) # 19351
bybitscore
raw.countmatrix.REFS$NCBI_refseq
bybitscore
raw.countmatrix.REFS
bybitscore
raw.countmatrix.REFS$NCBI_refseq
raw.countmatrix.REFS$Airradians_TranscriptID
gsub('*.-',''raw.countmatrix.REFS$Airradians_TranscriptID)
gsub('*.-','',raw.countmatrix.REFS$Airradians_TranscriptID)
gsub('.*-','',raw.countmatrix.REFS$Airradians_TranscriptID)
nrow(bybitscore %>% dplyr::filter(qseqid  %in%
nrow(bybitscore %>% dplyr::filter(qseqid  %in%
gsub('.*-','',raw.countmatrix.REFS$Airradians_TranscriptID))) # 19351
nrow(bybitscore %>% dplyr::filter(qseqid  %in%
gsub('.*-','',raw.countmatrix.REFS$Airradians_TranscriptID))) # 19351
nrow(bybitscore %>% dplyr::filter(qseqid  %in%
(gsub('.*-','',raw.countmatrix.REFS$Airradians_TranscriptID)))) # 19351
bybitscore
(gsub('.*-','',raw.countmatrix.REFS$Airradians_TranscriptID))
blastx_Airr_Cvirg
raw.countmatrix.REFS
bybitscore
raw.countmatrix.REFS
paste0(raw.countmatrix.REFS$NCBI_refseq,
'_cds',
raw.countmatrix.REFS$Airradians_GeneID)
nrow(bybitscore %>% dplyr::filter(sseqid  %in%
nrow(bybitscore %>% dplyr::filter(sseqid  %in%
nrow(bybitscore %>% dplyr::filter(sseqid  %in%
paste0(raw.countmatrix.REFS$NCBI_refseq,
'_cds',
raw.countmatrix.REFS$Airradians_GeneID))) # 19351
nrow(bybitscore %>% dplyr::filter(sseqid  %in%
paste0(raw.countmatrix.REFS$NCBI_refseq,
'_cds',
raw.countmatrix.REFS$Airradians_GeneID))) # 19351
mean(as.numeric(bybitscore$bitscore)) # 454.1144
sd(as.numeric(bybitscore$bitscore))/(sqrt(length(bybitscore$bitscore))) # 3.829952
mean(as.numeric(bybitscore$pident)) # 51.13289
sd(as.numeric(bybitscore$pident))/(sqrt(length(bybitscore$pident))) # 0.1140987
# by evalue (lowest is the best hit) - use 'which.min'
byevalue    <- blastx_Airr_Cvirg[,.SD[which.min(evalue)],by=sseqid] # min evalue
length(unique(byevalue$sseqid)) # 19598
length(unique(byevalue$sseqid))  == length(unique(blastx_Airr_Cvirg$sseqid))# TRUE
nrow(byevalue %>% dplyr::filter(sseqid %in% raw.countmatrix.REFS$sseqid)) # 19351
nrow(byevalue %>% dplyr::filter(sseqid  %in%
paste0(raw.countmatrix.REFS$NCBI_refseq,
'_cds',
raw.countmatrix.REFS$Airradians_GeneID))) # 19351
# calla dataframe for the two sseqids of blatx dataframes by e value and bitscore
# what does this do? if only one column output than the two are the exact same,
#  if two than bitscore (highest) and evalue (lowest) call different transcript IDs
head(as.data.table(c(byevalue$sseqid, bybitscore$sseqid)), header=F) # one column  meaning they are the exact same!
# lets go with evalue as the 'gold stnadard'
# 'byevalue' gives us the Airradians trnascript ID (i.e. evm.model.Contig....' alonside
# for each of the corresponding C virginica IDs (i.e. XM_....') to obtaitn KEGG and GO annotation based
# on sequence relatedness
head(byevalue)
# Now lets call the C virginica transcriptome and edit to fit our needs
# seq ID reference fr C virginica data
Cvirg_seqID_editted <- as.data.frame(Cvirg_seqID[Cvirg_seqID$fullID %like% "XM_", ]  %>% # call all mRNA samples - accession always starts with XM
dplyr::mutate(TranscriptID = (str_match(fullID, ">\\s*(.*?)\\s* PREDICTED:")[,2])) %>% # remove excess ID information
dplyr::mutate(ProteinID = sub('.*Crassostrea virginica ', '',(gsub("\\s\\(LOC.*|\\sLOC111.*", "", perl=TRUE, fullID))) ) %>% # parse out the protein ID
dplyr::mutate(GeneID = paste('L', (gsub('),.*', '',(gsub(".*\\s\\(L", "", fullID)))), sep = '')) %>%  # parse out the gene ID
dplyr::select(-fullID)) # remove the full ID
nrow(Cvirg_seqID_editted) # 60201
nrow(Cvirg_GOterms2) # 19667 - only rows with a GO term present, meanLength of all unique gene IDs
Cvirg_seqIDMASTER <- unique(merge(Cvirg_seqID_editted,Cvirg_GOterms2, by = 'GeneID'))
nrow(Cvirg_seqIDMASTER) # 36573
Cvirg_seqIDMASTER
# write csv
write.csv(Cvirg_seqIDMASTER, file = "Data/Transcriptomics/metadata/seq_id_Cvirginica_master.csv", row.names = FALSE)
#  read 'Cvirg_seqIDMASTER' output above
# file contains the Cvirgnica transcript ID, protein ID, gene ID and GO term annotation
Cvirg_seqID      <-  read.csv(file = "Data/Transcriptomics/metadata/seq_id_Cvirginica_master.csv", header =T) %>%
dplyr::rename(Cvirginica_TranscriptID = TranscriptID)
# # lern how many unique A irradians transcript IDs we have in the raw count matrix
Airr.ID         <- as.data.frame(raw.countmatrix.REFS$transcript_id) %>%
`colnames<-`("sseqid")
Airr.ID
# # lern how many unique A irradians transcript IDs we have in the raw count matrix
Airr.ID         <- as.data.frame(raw.countmatrix.REFS$Airradians_TranscriptID) %>%
`colnames<-`("sseqid")
Airr.ID
nrow(unique(Airr.ID)) == nrow(Airr.ID) # TRUE
nrow(Airr.ID) # 47704 - the number of transcripts TOTAL in the raw count matrix1
( bybitscore %>%
dplyr::select(sseqid, qseqid) %>%
`colnames<-`(c("Airradians_TranscriptID", "Cvirginica_TranscriptID")))
bybitscore
# merge the Cvirginica seIDs (all cvirginica IDs) with the blastx table we made contianing Airradians hits!
Cvirg_ID.bitscore <- merge(Cvirg_seqID,
#(byevalue   %>%
( bybitscore %>%
dplyr::select(sseqid, qseqid) %>%
`colnames<-`(c("Airradians_TranscriptID", "Cvirginica_TranscriptID"))), by="Cvirginica_TranscriptID",  all=T) %>%
`colnames<-`(c("blastxEval_CvirgTranscriptID",
"blastxEval_CvirgProteinID",
"blastxEval_CvirgGeneID",
"meanLength",
"blastxEval_CvirgGOterms",
"sseqid"))
Cvirg_ID.bitscore
Cvirg_ID.bitscore
seq_ref_Airradians
Cvirg_ID.bitscore
# Airradians reference file
seq_ref_Airradians  <- read.csv(file="Data/Transcriptomics/hpc_out/diamond/GCF_041381155.1_Ai_NY_genomic_ID_REFERENCE.csv", header=F) %>%
tidyr::separate(V1, into = c("NCBI_refseq", "transcript_id", "gene_id"), sep = " ") %>%
dplyr::mutate(gene_id = gsub(".*gene-", "", gene_id), # convert gene-LOC138315196 to just LOC138315196
sseqid  = paste0(NCBI_refseq,"_cds",gene_id)) # the diamond sseqid name to get cvirg KEGG and cgig IDs
seq_ref_Airradians
read.csv(file="Data/Transcriptomics/metadata/seq_id_Airradians_master.csv")
seq_ref_Airradians  <- read.csv(file="Data/Transcriptomics/metadata/seq_id_Airradians_master.csv") %>%
dplyr::mutate(sseqid  = paste0(NCBI_refseq,"_cds",Airradians_GeneID))
nrow(seq_ref_Airradians) # 47516
nrow(raw.countmatrix) # 49900
raw.countmatrix.REFS <- merge(raw.countmatrix, seq_ref_Airradians, by = 'Airradians_TranscriptID')
nrow(raw.countmatrix.REFS) # 46371 there are some omitted accession IDs
# we can now do a final merge
# here was have all Airradians Transcript IDs that had the highest
# evalue hit to the Cvirginica protein database
# merged are the protein names, geneID, GOterms from the Cvirginica database
# to facilitate functional analsiss of DEGs in the Airradians data
Airr_Cvirg_master_seq_ID  <- merge(seq_ref_Airradians,
Cvirg_ID.bitscore,by="sseqid")
# merge2  <- merge(merge1, Cvirg_ID.bitsc,by="Airradians_TranscriptID", all=T)
nrow(Airr_Cvirg_master_seq_ID) # 34988
(nrow(Airr_Cvirg_master_seq_ID) / nrow(raw.countmatrix))*100 # 70.11 % of genes in our count matrix are represented
Airr_Cvirg_master_seq_ID
# write csv
write.csv(Airr_Cvirg_master_seq_ID, file = "Data/Transcriptomics/metadata/seq_id_AirrCvirg_MERGED_master.csv", row.names = FALSE)
# load the filtered count matrix (decided upon 3 CPM in 50% of samples) review the Counts_Filtered.Rmd script
read_matrix_raw  <- read.csv(file="Output/Transcriptomics/raw_count_matrix_editted.csv", header=T) %>%
dplyr::rename(Airradians_TranscriptID = 'X')
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
# knitr::opts_knit$set(root.dir = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
# load libraries - notes show the install command needed to install (pre installed)
library(tidyr)
library(DESeq2) # note: this was previously installed with the command `BiocManager::install("DESeq2")`
library(edgeR)
library(goseq)
library(dplyr)
library(GenomicFeatures)
library(data.table)
library(calibrate)
library(affycoretools) # note: this was previously installed with the BiocManager::install("affycoretools")
# load libraries - notes show the install command needed to install (pre installed)
library(tidyr)
library(DESeq2) # note: this was previously installed with the command `BiocManager::install("DESeq2")`
library(edgeR)
library(goseq)
library(dplyr)
library(GenomicFeatures)
library(data.table)
library(calibrate)
# library(affycoretools) # note: this was previously installed with the BiocManager::install("affycoretools")
library(data.table)
library(vsn)
# load libraries - notes show the install command needed to install (pre installed)
library(tidyr)
library(DESeq2) # note: this was previously installed with the command `BiocManager::install("DESeq2")`
library(edgeR)
library(goseq)
library(dplyr)
library(GenomicFeatures)
library(data.table)
library(calibrate)
# library(affycoretools) # note: this was previously installed with the BiocManager::install("affycoretools")
library(data.table)
# library(vsn)
# Plotting
library(ggplot2)
library(cowplot)
library(pheatmap)
library(gplots)
library(RColorBrewer)
library(EnhancedVolcano)  # note: this was previously installed with the command `BiocManager::install("EnhancedVolcano")`
library(tweeDEseq)
library(pcaExplorer) # note: this was previously installed with the command `BiocManager::install("pcaExplorer")
library(ggpubr)
library(stringr)
### experiment metadata [from Count_Matrix_Stats.Filter.R]  - convert characaters to factors for DESeq2
exp_metadata <- read.csv(file="Data/Transcriptomics/metadata/metadata.csv", sep=',', header=TRUE) %>%
dplyr::mutate(All_pCO2 = paste0(pCO2_history, pCO2_exposure))
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
# knitr::opts_knit$set(root.dir = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
### experiment metadata [from Count_Matrix_Stats.Filter.R]  - convert characaters to factors for DESeq2
exp_metadata <- read.csv(file="Data/Transcriptomics/metadata/metadata.csv", sep=',', header=TRUE) %>%
dplyr::mutate(All_pCO2 = paste0(pCO2_history, pCO2_exposure))
# NOTE: the Smaple_num S32 should be omitted - it entials a single individual from severe pCO2 history
# exposure to moderate pCO2 - omit from both the expreiment metadata and from the count amtrices for building dds objects!
exp_metadata <- exp_metadata %>% dplyr::filter(!Sample_num == 'S32')# 20230516	80	14	severe	moderate	C7	S32
nrow(exp_metadata) == 35 # TRUE!!
# non-filtered read matrix
raw_counts     <-
read.csv(file="Output/Transcriptomics/raw_count_matrix_all.csv",
sep=',',
header=TRUE)  %>%
dplyr::rename(transcript_id = X) %>%
tibble::column_to_rownames(var = "transcript_id") %>%
dplyr::select(!S32) %>%
as.matrix()
ncol(raw_counts) # 35 - good!
nrow(raw_counts) # 49900 - all genes
# gather the 3CPM filtered read matrices
# all filtered
filtered_counts_all <-
read.csv(file="Output/Transcriptomics/Filtered_count_matrix/filtered_count_matrix_all.csv",
sep=',',
header=TRUE)  %>%
dplyr::rename(transcript_id = X) %>%
tibble::column_to_rownames(var = "transcript_id") %>%
dplyr::select(!S32) %>%
as.matrix()
ncol(filtered_counts_all) # 35, good!
nrow(filtered_counts_all) # 10001 subset from the 5CPM cutoff
# challenge
filtered_counts_challenge <-
read.csv(file="Output/Transcriptomics/Filtered_count_matrix/filtered_count_matrix_challenge.csv",
sep=',',
header=TRUE)  %>%
dplyr::rename(transcript_id = X) %>%
tibble::column_to_rownames(var = "transcript_id") %>%
as.matrix()
ncol(filtered_counts_challenge) # 30, good!
nrow(filtered_counts_challenge) # 9866 subset from the 5CPM cutoff
# cohort
filtered_counts_cohort <-
read.csv(file="Output/Transcriptomics/Filtered_count_matrix/filtered_count_matrix_cohort.csv",
sep=',',
header=TRUE)  %>%
dplyr::rename(transcript_id = X) %>%
tibble::column_to_rownames(var = "transcript_id") %>%
as.matrix()
ncol(filtered_counts_cohort) # 15, good!
nrow(filtered_counts_cohort) # 12163 subset from the 9CPM cutoff
filtered_counts_cohor_df <- (as.data.frame((filtered_counts_cohort)))
str(filtered_counts_cohor_df, strict.width = "wrap")
data_st                  <- as.data.frame(t(apply(as.matrix(filtered_counts_cohor_df), 1, scale)))
str(data_st, strict.width = "wrap")
data_st                  <- tibble::rownames_to_column(data_st, "ID")
colnames(data_st)[2:ncol(data_st)] <- colnames(filtered_counts_cohor_df)
nID <- which(is.nan(data_st[,2]))
data_st[nID,2:length(data_st)] <- 0
str(data_st, strict.width = "wrap")
library(reshape2)
ggplot(data = melt(data_st), aes(x=variable, y=value)) + geom_boxplot()
# looks like sample S.33 is poor here - we should ommit
# Note: downsteram without omitting we saw this is an outliter in PCA analysis too
colnames(data_st)[2:6] <- c('Low.1','Low.2','Low.3','Low.4','Low.5')
colnames(data_st)[7:11] <- c('Mod.1','Mod.2','Mod.3','Mod.4','Mod.5')
colnames(data_st)[12:16] <- c('High.1','High.2','High.3','High.4','High.5')
exp_metadata_1    <- exp_metadata %>% dplyr::filter(pCO2_history %in% c('low','severe')) # omit moderate history
raw_counts_1      <- raw_counts[,exp_metadata_1$Sample_num] # omit columns from the raw matrix
filtered_counts_1 <- filtered_counts_challenge # use the filtered data - already catered to the target samples when filtered prior
exp_metadata_2    <- exp_metadata %>% dplyr::filter(All_pCO2 %in% c('lowlow', 'moderatemoderate', 'severesevere')) %>%
dplyr::filter(!Sample_num == 'S36')
raw_counts_2      <- raw_counts[,exp_metadata_2$Sample_num]
filtered_counts_2 <- filtered_counts_cohort[,exp_metadata_2$Sample_num] # use the filtered data - already catered to the target samples when filtered prior
ncol(filtered_counts_2)
# (1) Response to challenge
dds_1raw <- DESeqDataSetFromMatrix(countData = raw_counts_1,
colData = exp_metadata_1, design = ~pCO2_history+pCO2_exposure) # DESeq Data Set (dds)
dds_1filt <- DESeqDataSetFromMatrix(countData = filtered_counts_1,
colData = exp_metadata_1, design = ~pCO2_history+pCO2_exposure) # DESeq Data Set (dds)
# (2) Cohort differences under *match*
dds_2raw <- DESeqDataSetFromMatrix(countData = raw_counts_2,
colData = exp_metadata_2, design = ~pCO2_history) # DESeq Data Set (dds)
dds_2filt <- DESeqDataSetFromMatrix(countData = filtered_counts_2,
colData = exp_metadata_2, design = ~pCO2_history) # DESeq Data Set (dds)
dds_2filt    <- DESeq(dds_2filt) # TRAGET DATA FOR DESEQ2 COHORT ANALYSIS
vstExp.filt_challenge       <- vst(dds_1filt)
vstExp.filt_challenge       <- vst(dds_1filt)
vstExp.filt_challenge.assay <- assay(vstExp.filt_challenge) # call only the transformed coutns in the dds object
vstExp.filt_challenge.assay <- assay(vstExp.filt_challenge) # call only the transformed coutns in the dds object
vstExp.filt_challenge.df    <- as.data.frame(vstExp.filt_challenge.assay)
vstExp.filt_challenge.df    <- tibble::rownames_to_column(vstExp.filt_challenge.df, var = "Gene")
# cohort
vstExp.raw_cohort       <- vst(dds_2raw)
vstExp.raw_cohort.assay <- assay(vstExp.raw_cohort) # call only the transformed coutns in the dds object
vstExp.raw_cohort.df    <- as.data.frame(vstExp.raw_cohort.assay)
vstExp.raw_cohort.df    <- tibble::rownames_to_column(vstExp.raw_cohort.df, var = "Gene")
vstExp.raw_cohort.df    <- vstExp.raw_cohort.df %>%
mutate_at(c(2:ncol(vstExp.raw_cohort.df)), as.numeric)
vstExp.filt_cohort       <- vst(dds_2filt)
vstExp.filt_cohort.assay <- assay(vstExp.filt_cohort) # call only the transformed coutns in the dds object
vstExp.filt_cohort.df    <- as.data.frame(vstExp.filt_cohort.assay)
vstExp.filt_cohort.df    <- tibble::rownames_to_column(vstExp.filt_cohort.df, var = "Gene")
vstExp.filt_cohort.df    <- vstExp.filt_cohort.df %>%
mutate_at(c(2:ncol(vstExp.filt_cohort.df)), as.numeric)
# Edit the annotation file (Cvirg blasted to annotate draft genome contigs of Airradians)
Airr_Cvirg_annotation <- read.csv(file="Data/Transcriptomics/metadata/seq_id_AirrCvirg_MERGED_master.csv",
sep = ',',
header = T) %>%
dplyr::select(c('NCBI_refseq', 'transcript_id', 'gene_id', # Airra IDs
"blastxEval_CvirgTranscriptID",
"blastxEval_CvirgProteinID",
"blastxEval_CvirgGeneID",
"blastxEval_CvirgGOterms")) %>%
dplyr::rename(Airradians_NCBI_refseq = NCBI_refseq,
Airradians_TranscriptID = transcript_id,
Airradians_gene_id = gene_id)
