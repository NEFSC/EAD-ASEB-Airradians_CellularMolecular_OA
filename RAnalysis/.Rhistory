KEGG_cgigas
df              <- as.data.frame(head(KEGG_cgigas))
rownames(df)    <- c()
KEGGoutput      <- as.data.frame(do.call(cbind.data.frame, df)) %>%
dplyr::mutate(
Rich_factor  = (  (as.numeric(sub("/.*", "", GeneRatio))) /
(as.numeric(sub("/.*", "", BgRatio)))),
Day = 'Day14',
modColor = 'frontloaded from red') %>%
dplyr::rename(KEGGID_pathway = ID,
pathway.name   = Description,
Gene.IDs       = geneID,
Num.genes.exp  = Count) %>%
dplyr::mutate(Num.genes.all  = (as.numeric(sub("/.*", "", BgRatio))),
log10_pvalue   = abs(log10(pvalue)),
pathway.name = sapply(strsplit(pathway.name, " - Crassostrea"),
"[",1)) %>% # ommit the unneeded pathway string
dplyr::select('Day', 'modColor', 'KEGGID_pathway', 'pathway.name',
'Num.genes.all', 'Num.genes.exp', 'Gene.IDs',
'Rich_factor', 'pvalue', 'log10_pvalue', 'qvalue') %>%
arrange(desc(as.numeric(Rich_factor)))
# Plot
plot<- KEGGoutput %>%
ggplot(aes(x=reorder(pathway.name, Rich_factor), y= Rich_factor)) +
geom_point( aes(col=qvalue, size=Num.genes.exp)) +   # Draw points
geom_segment(aes(x=pathway.name,
xend=pathway.name,
y=min(Rich_factor),
yend=max(Rich_factor)),
linetype=NA,
size=0) +   # Draw dashed lines
labs(title="Frontloaded genes",
x = "Pathway",
y = "Rich Factor") +
theme_bw() +
coord_flip()
# Plot
plot<- KEGGoutput %>%
ggplot(aes(x=reorder(pathway.name, Rich_factor), y= Rich_factor)) +
geom_point( aes(col=qvalue, size=Num.genes.exp)) +   # Draw points
geom_segment(aes(x=pathway.name,
xend=pathway.name,
y=min(Rich_factor),
yend=max(Rich_factor)),
linetype=NA,
size=0) +   # Draw dashed lines
labs(title="Frontloaded genes",
x = "Pathway",
y = "Rich Factor") +
theme_bw() +
coord_flip()
plot
Crass_virg_kegglist
Crass_virg_kegglist_dataframe  <- as.data.frame(Crass_virg_kegglist) %>%  rownames_to_column() # with will allow us to merge
colnames(Crass_virg_kegglist_dataframe) <- c('sseqid', 'Gene_name')
Crass_virg_kegglist_dataframe
Airr_Cvirg_Cgig_KEGG <- merge(Cvirg_KEGGIDs_Ref, Airr_Cvirg_diamond, by = 'Cvirginica_TranscriptID')
nrow(Airr_Cvirg_Cgig_KEGG) # 18841
Airr_Cvirg_Cgig_KEGG
Cvirg_KEGGIDs_Ref
Crass_virg_kegglist_dataframe
Crass_gigas_kegglist_dataframe
Crass_gigas_kegglist           <- keggList("crg") # call the C. gigas genome! - notice the csa terms are rownames!
Crass_gigas_kegglist_dataframe <- as.data.frame(Crass_gigas_kegglist) %>%  rownames_to_column() # with will allow us to merge
colnames(Crass_gigas_kegglist_dataframe) <- c('sseqid', 'Gene_name')
Crass_gigas_kegglist_dataframe
nrow(Cvirg_KEGGIDs_Ref) # 59089
Cvirg_KEGGIDs_Ref
Airr_Cvirg_diamond
Airr_Cvirg_Cgig_KEGG <- merge(Cvirg_KEGGIDs_Ref, Airr_Cvirg_diamond, by = 'Cvirginica_TranscriptID')
Airr_Cvirg_Cgig_KEGG
KEGG_cgigas     <- enrichKEGG(gene = entrezID_vector,
organism  = 'cvn', # 'hsa' is human 'crg' is pacific oyster
keyType="kegg",
pAdjustMethod = "none",
pvalueCutoff = 1)
KEGG_cgigas
# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(kableExtra)
library(pander)
library(data.table)
library(stringr)
library(devtools)
# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis") # personal computer
# count matrix from prepDE.py script
# NOTE: aligned to the Airradians draft and unannotated genome!
raw.countmatrix  <- read.csv(file="Output/Transcriptomics/raw_count_matrix_editted.csv", header=T) %>%
dplyr::rename(transcript_id = X)
# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis") # personal computer
# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis") # personal computer
# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis") # personal computer
# count matrix from prepDE.py script
# NOTE: aligned to the Airradians draft and unannotated genome!
raw.countmatrix  <- read.csv(file="Output/Transcriptomics/raw_count_matrix_editted.csv", header=T) %>%
dplyr::rename(transcript_id = X)
# due to the lack of annotation in the Airraians draft genome..
# call the Cvirginica database of protein names and transcript ID calls
Cvirg_seqID      <-  as.data.table(read.delim2(file = "Data/Transcriptomics/metadata/seq_id.txt", header =F)) %>%
`colnames<-`("fullID")
nrow(Cvirg_seqID) # 66625
Cvirg_GOterms    <-  read.csv(file = "Data/Transcriptomics/metadata/Cviginiva_GOterms.csv", header =T) %>%
dplyr::select(c('GeneID','Annotation_GO_ID', 'Length')) %>%
dplyr::group_by(GeneID) %>% # tif you add GO column here we get duplicates, some of the same gene ID calls (of diff length) have GO term or do not, weird!
dplyr::summarise(
meanLength = mean(Length)) %>%
unique() # there are many redundant rows here
subset(Cvirg_GOterms,duplicated(GeneID)) # no duplicates, BUT need to filter in the GO terms here
Cvirg_GOterms2 <- merge(Cvirg_GOterms,
( unique(read.csv(file = "Data/Transcriptomics/metadata/Cviginiva_GOterms.csv", header =T) %>%
dplyr::select(c('GeneID','Annotation_GO_ID')) %>%
dplyr::filter(!Annotation_GO_ID == "")) ),
by = 'GeneID')
nrow(Cvirg_GOterms2) #19667
# diamond result to obtain accession IDs of annotated genes Cvirg and Cgigas for gene ID, GO, and KEGG ID information
#(1) Airradians protein database (...pep.fna file) with Cvirginica nucleotide query
blastx_Airr_Cvirg <- as.data.table(read.delim2(file="Data/Transcriptomics/hpc_out/diamond/AirrProDB_CvirgNQuery/airradians_diamond_out", header=F)) %>%
`colnames<-`(c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore"))
#(2) Cgigas protein database with Airradians nucleotide query
blastx_Airr_Cgig  <- as.data.table(read.delim2(file="Data/Transcriptomics/hpc_out/diamond/CgigProDB_AirrNQuery/cgigas_diamond_out", header=F)) %>%
`colnames<-`(c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore"))
blastx_Airr_Cvirg
nrow(raw.countmatrix) # 26686 total unique transcrips calls in A irradians count matrix
# by bitscore (highest is the best hit) use 'which.max'
bybitscore  <- blastx_Airr_Cvirg[,.SD[which.max(bitscore)],by=sseqid] # max bitscore
length(unique(bybitscore$sseqid)) # 19042
length(unique(bybitscore$sseqid))  == length(unique(blastx_Airr_Cvirg$sseqid))# TRUE
nrow(bybitscore %>% dplyr::filter(sseqid %in% raw.countmatrix$transcript_id)) # 18961
# count matrix from prepDE.py script
# NOTE: aligned to the Airradians draft and unannotated genome!
raw.countmatrix  <- read.csv(file="Output/Transcriptomics/raw_count_matrix_all.csv", header=T) %>%
dplyr::rename(transcript_id = X)
raw.countmatrix[is.na(raw.countmatrix)] <- 0 # replace all occurances of NA with 0 in the cell NOT THE WHOLE ROW!
nrow(raw.countmatrix) # 26686 total transcripts
filtered.countmatrix  <- read.csv(file="Output/Transcriptomics/Filtered_count_matrix/filtered_count_matrix_all.csv", header=T) %>%
dplyr::rename(transcript_id = X)
filtered.countmatrix[is.na(filtered.countmatrix)] <- 0 # replace all occurances of NA with 0 in the cell NOT THE WHOLE ROW!
nrow(filtered.countmatrix) # 9492 total transcripts
# due to the lack of annotation in the Airraians draft genome..
# call the Cvirginica database of protein names and transcript ID calls
Cvirg_seqID      <-  as.data.table(read.delim2(file = "Data/Transcriptomics/metadata/seq_id.txt", header =F)) %>%
`colnames<-`("fullID")
nrow(Cvirg_seqID) # 66625
Cvirg_GOterms    <-  read.csv(file = "Data/Transcriptomics/metadata/Cviginiva_GOterms.csv", header =T) %>%
dplyr::select(c('GeneID','Annotation_GO_ID', 'Length')) %>%
dplyr::group_by(GeneID) %>% # tif you add GO column here we get duplicates, some of the same gene ID calls (of diff length) have GO term or do not, weird!
dplyr::summarise(
meanLength = mean(Length)) %>%
unique() # there are many redundant rows here
subset(Cvirg_GOterms,duplicated(GeneID)) # no duplicates, BUT need to filter in the GO terms here
Cvirg_GOterms2 <- merge(Cvirg_GOterms,
( unique(read.csv(file = "Data/Transcriptomics/metadata/Cviginiva_GOterms.csv", header =T) %>%
dplyr::select(c('GeneID','Annotation_GO_ID')) %>%
dplyr::filter(!Annotation_GO_ID == "")) ),
by = 'GeneID')
nrow(Cvirg_GOterms2) #19667
# diamond result to obtain accession IDs of annotated genes Cvirg and Cgigas for gene ID, GO, and KEGG ID information
#(1) Airradians protein database (...pep.fna file) with Cvirginica nucleotide query
blastx_Airr_Cvirg <- as.data.table(read.delim2(file="Data/Transcriptomics/hpc_out/diamond/AirrProDB_CvirgNQuery/airradians_diamond_out", header=F)) %>%
`colnames<-`(c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore"))
# how many unique trnascript IDs of Airradians were covered by oyster blastx(s)?
# Cvirginica
length(unique(blastx_Airr_Cvirg$sseqid)) # 19042 - Airradians transcripts - in blast x Airradiads Prot database  to Cvriginica nucleotide query
(length(unique(blastx_Airr_Cvirg$sseqid)) / nrow(raw.countmatrix))* 100 # 71.4% of genes!
# C gigas
length(unique(blastx_Airr_Cgig$qseqid)) # 7046 - Airradians transcripts - in Cgigas protein database to Airradians nucleotide query
(length(unique(blastx_Airr_Cgig$sseqid)) / nrow(raw.countmatrix))* 100 # 32.1% of genes!
# by bitscore (highest is the best hit) use 'which.max'
bybitscore  <- blastx_Airr_Cvirg[,.SD[which.max(bitscore)],by=sseqid] # max bitscore
length(unique(bybitscore$sseqid)) # 19042
length(unique(bybitscore$sseqid))  == length(unique(blastx_Airr_Cvirg$sseqid))# TRUE
nrow(bybitscore %>% dplyr::filter(sseqid %in% raw.countmatrix$transcript_id)) # 18961
# by evalue (lowest is the best hit) - use 'which.min'
byevalue    <- blastx_Airr_Cvirg[,.SD[which.min(evalue)],by=sseqid] # min evalue
length(unique(byevalue$sseqid)) # 19042
length(unique(byevalue$sseqid))  == length(unique(blastx_Airr_Cvirg$sseqid))# TRUE
nrow(byevalue %>% dplyr::filter(sseqid %in% raw.countmatrix$transcript_id)) # 18961
# calla dataframe for the two sseqids of blatx dataframes by e value and bitscore
# what does this do? if only one column output than the two are the exact same,
#  if two than bitscore (highest) and evalue (lowest) call different transcript IDs
head(as.data.table(c(byevalue$sseqid, bybitscore$sseqid)), header=F) # one column  meaning they are the exact same!
# lets go with evalue as the 'gold stnadard'
# 'byevalue' gives us the Airradians trnascript ID (i.e. evm.model.Contig....' alonside
# for each of the corresponding C virginica IDs (i.e. XM_....') to obtaitn KEGG and GO annotation based
# on sequence relatedness
head(byevalue)
s
# Now lets call the C virginica transcriptome and edit to fit our needs
# seq ID reference fr C virginica data
Cvirg_seqID_editted <- as.data.frame(Cvirg_seqID[Cvirg_seqID$fullID %like% "XM_", ]  %>% # call all mRNA samples - accession always starts with XM
dplyr::mutate(TranscriptID = (str_match(fullID, ">\\s*(.*?)\\s* PREDICTED:")[,2])) %>% # remove excess ID information
dplyr::mutate(ProteinID = sub('.*Crassostrea virginica ', '',(gsub("\\s\\(LOC.*|\\sLOC111.*", "", perl=TRUE, fullID))) ) %>% # parse out the protein ID
dplyr::mutate(GeneID = paste('L', (gsub('),.*', '',(gsub(".*\\s\\(L", "", fullID)))), sep = '')) %>%  # parse out the gene ID
dplyr::select(-fullID)) # remove the full ID
Cvirg_seqID_editted
nrow(Cvirg_seqID_editted) # 60201
nrow(Cvirg_GOterms2) # 19667 - only rows with a GO term present, meanLength of all unique gene IDs
Cvirg_seqIDMASTER <- unique(merge(Cvirg_seqID_editted,Cvirg_GOterms2, by = 'GeneID'))
nrow(Cvirg_seqIDMASTER) # 36573
Cvirg_seqIDMASTER
# write csv
write.csv(Cvirg_seqIDMASTER, file = "Data/Transcriptomics/metadata/seq_id_Cvirginica_master.csv", row.names = FALSE)
#  read 'Cvirg_seqIDMASTER' output above
# file contains the Cvirgnica transcript ID, protein ID, gene ID and GO term annotation
Cvirg_seqID      <-  read.csv(file = "Data/Transcriptomics/metadata/seq_id_Cvirginica_master.csv", header =T) %>%
dplyr::rename(Cvirginica_TranscriptID = TranscriptID)
# # lern how many unique A irradians transcript IDs we have in the raw count matrix
Airr.ID         <- as.data.frame(raw.countmatrix$transcript_id) %>%
`colnames<-`("Airradians_TranscriptID")
nrow(unique(Airr.ID)) == nrow(Airr.ID) # TRUE
nrow(Airr.ID) # 26686 - the number of transcripts TOTAL in the raw count matrix1
# merge the Cvirginica seIDs (all cvirginica IDs) with the blastx table we made contianing Airradians hits!
Cvirg_ID.evalue <- merge(Cvirg_seqID,
(byevalue   %>%
dplyr::select(sseqid, qseqid) %>%
`colnames<-`(c("Airradians_TranscriptID", "Cvirginica_TranscriptID"))), by="Cvirginica_TranscriptID",  all=T) %>%
`colnames<-`(c("blastxEval_CvirgTranscriptID",
"blastxEval_CvirgProteinID",
"blastxEval_CvirgGeneID",
"meanLength",
"blastxEval_CvirgGOterms",
"Airradians_TranscriptID"))
# merge the Cvirginica seIDs (all cvirginica IDs) with the blastx table we made contianing Airradians hits!
Cvirg_ID.evalue <- merge(Cvirg_seqID,
(byevalue   %>%
dplyr::select(sseqid, qseqid) %>%
`colnames<-`(c("Airradians_TranscriptID", "Cvirginica_TranscriptID"))), by="Cvirginica_TranscriptID",  all=T) %>%
`colnames<-`(c("blastxEval_CvirgTranscriptID",
"blastxEval_CvirgProteinID",
"blastxEval_CvirgGeneID",
"meanLength",
"blastxEval_CvirgGOterms",
"Airradians_TranscriptID"))
# we can now do a final merge
# here was have all Airradians Transcript IDs that had the highest
# evalue hit to the Cvirginica protein database
# merged are the protein names, geneID, GOterms from the Cvirginica database
# to facilitate functional analsiss of DEGs in the Airradians data
Airr_Cvirg_master_seq_ID  <- merge(Airr.ID,Cvirg_ID.evalue,by="Airradians_TranscriptID")
# merge2  <- merge(merge1, Cvirg_ID.bitsc,by="Airradians_TranscriptID", all=T)
nrow(Airr_Cvirg_master_seq_ID) # 19108
(nrow(Airr_Cvirg_master_seq_ID) / nrow(raw.countmatrix))*100 # 71.6 % of genes in our count matrix are represented
# write csv
write.csv(Airr_Cvirg_master_seq_ID, file = "Data/Transcriptomics/metadata/seq_id_AirrCvirg_MERGED_master.csv", row.names = FALSE)
# modul membership files - change col name to Airradians_TranscriptID to merge with KEGG ids in later chunk
Challenge_WGCNA.data <- read.csv(file="Output/Transcriptomics/WGCNA/challenge/Challenge_WGCNA_ModulMembership.csv",
sep=',', header=TRUE) %>%  dplyr::rename('Airradians_TranscriptID' =
'Airradians.TranscriptID')
# LOAD PACKAGES
library(clusterProfiler)
library(KEGGREST)
library(tidyr)
library(stringr)
library(forcats)
library(ggplot2)
library(scales)
library(ape)
library(data.table)
library(tidyverse)
library(fBasics)
library(dplyr)
# set working directory
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis") # sets the working
# modul membership files - change col name to Airradians_TranscriptID to merge with KEGG ids in later chunk
Challenge_WGCNA.data <- read.csv(file="Output/Transcriptomics/WGCNA/challenge/Challenge_WGCNA_ModulMembership.csv",
sep=',', header=TRUE) %>%  dplyr::rename('Airradians_TranscriptID' =
'Airradians.TranscriptID')
Cohort_WGCNA.data  <- read.csv(file="Output/Transcriptomics/WGCNA/cohorts/Cohorts_WGCNA_ModulMembership.csv",
sep=',', header=TRUE) %>%  dplyr::rename('Airradians_TranscriptID' =
'Airradians.TranscriptID')
FrontloadedUP_WGCNA.data <- read.csv(file="Output/Transcriptomics/WGCNA/challenge/Frontloading/UPmodulered_Severe.csv",
sep=',', header=TRUE) %>%  dplyr::rename('Airradians_TranscriptID' =
'Airradians.TranscriptID')
FrontloadedDOWN_WGCNA.data <- read.csv(file="Output/Transcriptomics/WGCNA/challenge/Frontloading/DOWNmodulegreen_Moderate.csv",
sep=',', header=TRUE) %>%  dplyr::rename('Airradians_TranscriptID' =
'Airradians.TranscriptID')
# reference Cvirginica KEGG IDs (contains )
Cvirg_KEGGIDs_Ref  <- read.csv(file = "Data/Transcriptomics/metadata/Seq_Cvirg_Reference.csv",header = T)
Cvirg_KEGGIDs_Ref
# diamond bastx output of Airradians genome with Cvirg query
Airr_Cvirg_diamond <- read.csv(file = "Data/Transcriptomics/metadata/seq_id_AirrCvirg_MERGED_master.csv",header = T) %>%
dplyr::rename('Cvirginica_TranscriptID' = 'blastxEval_CvirgTranscriptID') %>%
dplyr::select('Airradians_TranscriptID',
'Cvirginica_TranscriptID')
Airr_Cvirg_diamond
# call kegg list
Crass_virg_kegglist            <- keggList("cvn")
Crass_virg_kegglist_dataframe  <- as.data.frame(Crass_virg_kegglist) %>%  rownames_to_column() # with will allow us to merge
colnames(Crass_virg_kegglist_dataframe) <- c('sseqid', 'Gene_name')
Crass_virg_kegglist
Airr_Cvirg_diamond
Crass_virg_kegglist
Crass_virg_kegglist_dataframe
nrow(Cvirg_KEGGIDs_Ref) # 59089
Cvirg_KEGGIDs_Ref
Cvirg_KEGGIDs_Ref
Crass_virg_kegglist
Crass_virg_kegglist_dataframe  <- as.data.frame(Crass_virg_kegglist) %>%  rownames_to_column() # with will allow us to merge
colnames(Crass_virg_kegglist_dataframe) <- c('sseqid', 'Gene_name')
Crass_virg_kegglist_dataframe
install.packages('mgsa')
library(mgsa)
library(getGAF)
install.packages('getGAF')
library(getGAF)
library(getGAF)
install.packages("getGAF", dependencies = FALSE)
install.packages('flavin')
install.packages(BaseSet)
install.packages('BaseSet')
library(BaseSet)
# set working directory
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis") # sets the working
getGAF("Data/Transcriptomics/metadata/GCF_002022765.2_C_virginica-3.0_gene_ontology.gaf")
Cvirg_KEGGIDs_Ref
# call kegg list
View(Crass_virg_kegglist_dataframe)
Cvirg_KEGGIDs_Ref
Airr_Cvirg_diamond
Airr_Cvirg_Cgig_KEGG
Cvirg_KEGGIDs_Ref
# reference Cvirginica KEGG IDs (contains )
Cvirg_KEGGIDs_Ref  <- read.csv(file = "Data/Transcriptomics/metadata/Seq_Cvirg_Reference.csv",header = T) %>%
dplyr::mutate(Cvirginica_KEGGID = gsub("*.LOC", "", Cvirginica_GeneID))
Cvirg_KEGGIDs_Ref
# reference Cvirginica KEGG IDs (contains )
Cvirg_KEGGIDs_Ref  <- read.csv(file = "Data/Transcriptomics/metadata/Seq_Cvirg_Reference.csv",header = T) %>%
dplyr::mutate(Cvirginica_KEGGID = gsub(".*LOC", "", Cvirginica_GeneID))
Cvirg_KEGGIDs_Ref$Cvirginica_KEGGID
# reference Cvirginica KEGG IDs (contains )
Cvirg_KEGGIDs_Ref  <- read.csv(file = "Data/Transcriptomics/metadata/Seq_Cvirg_Reference.csv",header = T) %>%
Cvirg_KEGGIDs_Ref$Cvirginica_KEGGID
# reference Cvirginica KEGG IDs (contains )
Cvirg_KEGGIDs_Ref  <- read.csv(file = "Data/Transcriptomics/metadata/Seq_Cvirg_Reference.csv",header = T) %>%
dplyr::mutate(Cvirginica_KEGGID = paste0('cvn:',gsub(".*LOC", "", Cvirginica_GeneID)))
Cvirg_KEGGIDs_Ref$Cvirginica_KEGGID
# diamond bastx output of Airradians genome with Cvirg query
Airr_Cvirg_diamond <- read.csv(file = "Data/Transcriptomics/metadata/seq_id_AirrCvirg_MERGED_master.csv",header = T) %>%
dplyr::rename('Cvirginica_TranscriptID' = 'blastxEval_CvirgTranscriptID') %>%
dplyr::select('Airradians_TranscriptID',
'Cvirginica_TranscriptID')
nrow(Cvirg_KEGGIDs_Ref) # 59089
Cvirg_KEGGIDs_Ref
nrow(Airr_Cvirg_diamond) # 19108
Cvirg_KEGGIDs_Ref
Airr_Cvirg_diamond
Airr_Cvirg_Cgig_KEGG <- merge(Cvirg_KEGGIDs_Ref, Airr_Cvirg_diamond, by = 'Cvirginica_TranscriptID')
_Cgig
Airr_Cvirg_Cgig_KEGG <- merge(Cvirg_KEGGIDs_Ref, Airr_Cvirg_diamond, by = 'Cvirginica_TranscriptID')
nrow(Airr_Cvirg_Cgig_KEGG) # 18841
Airr_Cvirg_Cgig_KEGG
Airr_Cvirg_Cgig_KEGG %>%
# dplyr::filter(moduleColor %in% 'red')  %>%
dplyr::select(c('Airradians_TranscriptID',
'Cvirginica_KEGGID')) %>%
dplyr::filter(Airradians_TranscriptID %in%
FrontloadedUP_WGCNA.data$Airradians_TranscriptID)
Modred.frontloaded  <- as.data.frame(Airr_Cvirg_Cgig_KEGG %>%
# dplyr::filter(moduleColor %in% 'red')  %>%
dplyr::select(c('Airradians_TranscriptID',
'Cvirginica_KEGGID')) %>%
dplyr::filter(Airradians_TranscriptID %in%
FrontloadedUP_WGCNA.data$Airradians_TranscriptID) %>%
na.omit() %>%
dplyr::mutate(Cgigas_KEGGID = gsub(".*:","",Cgigas_KEGGID)) %>%
unnest(Cgigas_KEGGID))
Modred.frontloaded  <- as.data.frame(Airr_Cvirg_Cgig_KEGG %>%
# dplyr::filter(moduleColor %in% 'red')  %>%
dplyr::select(c('Airradians_TranscriptID',
'Cvirginica_KEGGID')) %>%
dplyr::filter(Airradians_TranscriptID %in%
FrontloadedUP_WGCNA.data$Airradians_TranscriptID) %>%
na.omit() %>%
dplyr::mutate(Cvirginica_KEGGID = gsub(".*:","",Cvirginica_KEGGID)) %>%
unnest(Cvirginica_KEGGID))
nrow(Modred.frontloaded) # 204
entrezID_vector <- as.vector(as.numeric(Modred.frontloaded$Cvirginica_KEGGID))
KEGG_cgigas     <- enrichKEGG(gene = entrezID_vector,
organism  = 'cvn', # 'hsa' is human 'crg' is pacific oyster
keyType="kegg",
pAdjustMethod = "none",
pvalueCutoff = 1)
KEGG_cgigas
Modgreen.frontloaded  <- as.data.frame(Airr_Cvirg_Cgig_KEGG %>%
dplyr::select(c('Airradians_TranscriptID',
'Cvirginica_KEGGID')) %>%
dplyr::filter(Airradians_TranscriptID %in%
FrontloadedDOWN_WGCNA.data$Airradians_TranscriptID) %>%
na.omit() %>%
dplyr::mutate(Cvirginica_KEGGID = gsub(".*:","",Cvirginica_KEGGID)) %>%
unnest(Cvirginica_KEGGID))
nrow(Modgreen.frontloaded) # 258
entrezID_vector <- as.vector(as.numeric(Modgreen.frontloaded$Cvirginica_KEGGID))
KEGG_cgigas     <- enrichKEGG(gene = entrezID_vector,
organism  = 'cvn', # 'hsa' is human 'crg' is pacific oyster
keyType="kegg",
pAdjustMethod = "none",
pvalueCutoff = 1)
KEGG_cgigas
unique(Modred.frontloaded$Cvirginica_KEGGID)
unique(Modgreen.frontloaded$Cvirginica_KEGGID)
entrezID_vector <- as.vector(as.numeric(unique(Modgreen.frontloaded$Cvirginica_KEGGID)))
KEGG_cgigas     <- enrichKEGG(gene = entrezID_vector,
organism  = 'cvn', # 'hsa' is human 'crg' is pacific oyster
keyType="kegg",
pAdjustMethod = "none",
pvalueCutoff = 1)
KEGG_cgigas
Cvirg_KEGGIDs_Ref
Airr_Cvirg_diamond
Cvirg_KEGGIDs_Ref
Airr_Cvirg_diamond
Cvirg_KEGGIDs_Ref
Airr_Cvirg_Cgig_KEGG <- merge(Cvirg_KEGGIDs_Ref, Airr_Cvirg_diamond, by = 'Cvirginica_TranscriptID')
nrow(Airr_Cvirg_Cgig_KEGG) # 18841
Airr_Cvirg_diamond
Cvirg_KEGGIDs_Ref
Airr_Cvirg_diamond
Cvirg_KEGGIDs_Ref
Airr_Cvirg_Cgig_KEGG <- merge(Cvirg_KEGGIDs_Ref, Airr_Cvirg_diamond, by = 'Cvirginica_TranscriptID', all=T)
Airr_Cvirg_Cgig_KEGG
nrow(Airr_Cvirg_Cgig_KEGG) # 18841
19108- 18841 # 267 lost in the merge..
Airr_Cvirg_Cgig_KEGG
Cvirg_KEGGIDs_Ref
Airr_Cvirg_diamond
Modred.frontloaded  <- as.data.frame(Airr_Cvirg_Cgig_KEGG %>%
# dplyr::filter(moduleColor %in% 'red')  %>%
dplyr::select(c('Airradians_TranscriptID',
'Cvirginica_KEGGID')) %>%
dplyr::filter(Airradians_TranscriptID %in%
FrontloadedUP_WGCNA.data$Airradians_TranscriptID) %>%
na.omit() %>%
dplyr::mutate(Cvirginica_KEGGID = gsub(".*:","",Cvirginica_KEGGID)) %>%
unnest(Cvirginica_KEGGID))
nrow(Modred.frontloaded) # 204
Modgreen.frontloaded  <- as.data.frame(Airr_Cvirg_Cgig_KEGG %>%
dplyr::select(c('Airradians_TranscriptID',
'Cvirginica_KEGGID')) %>%
dplyr::filter(Airradians_TranscriptID %in%
FrontloadedDOWN_WGCNA.data$Airradians_TranscriptID) %>%
na.omit() %>%
dplyr::mutate(Cvirginica_KEGGID = gsub(".*:","",Cvirginica_KEGGID)) %>%
unnest(Cvirginica_KEGGID))
nrow(Modgreen.frontloaded) # 258
Modgreen.frontloaded  <- as.data.frame(Airr_Cvirg_Cgig_KEGG %>%
dplyr::select(c('Airradians_TranscriptID',
'Cvirginica_KEGGID')) %>%
dplyr::filter(Airradians_TranscriptID %in%
FrontloadedDOWN_WGCNA.data$Airradians_TranscriptID) %>%
# na.omit() %>%
dplyr::mutate(Cvirginica_KEGGID = gsub(".*:","",Cvirginica_KEGGID)) %>%
unnest(Cvirginica_KEGGID))
nrow(Modgreen.frontloaded) # 258
entrezID_vector <- as.vector(as.numeric(unique(Modgreen.frontloaded$Cvirginica_KEGGID)))
KEGG_cgigas     <- enrichKEGG(gene = entrezID_vector,
organism  = 'cvn', # 'hsa' is human 'crg' is pacific oyster
keyType="kegg",
pAdjustMethod = "none",
pvalueCutoff = 1)
df              <- as.data.frame(head(KEGG_cgigas))
rownames(df)    <- c()
KEGGoutput      <- as.data.frame(do.call(cbind.data.frame, df)) %>%
dplyr::mutate(
Rich_factor  = (  (as.numeric(sub("/.*", "", GeneRatio))) /
(as.numeric(sub("/.*", "", BgRatio)))),
Day = 'Day14',
modColor = 'frontloaded from green') %>%
dplyr::rename(KEGGID_pathway = ID,
pathway.name   = Description,
Gene.IDs       = geneID,
Num.genes.exp  = Count) %>%
dplyr::mutate(Num.genes.all  = (as.numeric(sub("/.*", "", BgRatio))),
log10_pvalue   = abs(log10(pvalue)),
pathway.name = sapply(strsplit(pathway.name, " - Crassostrea"),
"[",1)) %>% # ommit the unneeded pathway string
dplyr::select('Day', 'modColor', 'KEGGID_pathway', 'pathway.name',
'Num.genes.all', 'Num.genes.exp', 'Gene.IDs',
'Rich_factor', 'pvalue', 'log10_pvalue', 'qvalue') %>%
arrange(desc(as.numeric(Rich_factor)))
KEGGoutput
Modred.frontloaded  <- as.data.frame(Airr_Cvirg_Cgig_KEGG %>%
# dplyr::filter(moduleColor %in% 'red')  %>%
dplyr::select(c('Airradians_TranscriptID',
'Cvirginica_KEGGID')) %>%
dplyr::filter(Airradians_TranscriptID %in%
FrontloadedUP_WGCNA.data$Airradians_TranscriptID) %>%
# na.omit() %>%
dplyr::mutate(Cvirginica_KEGGID = gsub(".*:","",Cvirginica_KEGGID)) %>%
unnest(Cvirginica_KEGGID))
nrow(Modred.frontloaded) # 204
entrezID_vector <- as.vector(as.numeric(Modred.frontloaded$Cvirginica_KEGGID))
KEGG_cgigas     <- enrichKEGG(gene = entrezID_vector,
organism  = 'cvn', # 'hsa' is human 'crg' is pacific oyster
keyType="kegg",
pAdjustMethod = "none",
pvalueCutoff = 1)
KEGG_cgigas
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_CellularMolecular_OA/RAnalysis")
# load libraries - notes show the install command needed to install (pre installed)
library(goseq)
# load libraries - notes show the install command needed to install (pre installed)
library(goseq)
